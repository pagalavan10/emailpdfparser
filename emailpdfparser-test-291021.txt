/*============================================================================================================
*Class Name     : EmailPDFParsingHandler 
*Description    : All the implementations related to DumpsterCreation via sending email should be handled here
*Company        : Merfantz Technologies Pvt Ltd
*Date           : 20th Dec, 2018
*Version        : 1.0
*Change History : EmailPDFParsingHandler 
*Methods        : global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope) 
                  public static void UploadFile(Blob file_body, String file_name, String reqEndPoint , Messaging.InboundEmail email)
*============================================================================================================*/


global class EmailPDFParsingHandler implements Messaging.InboundEmailHandler  {
        
        global static string purchaseOrderNumber;
        global static List<string> DumpsterDropOffvisitDate = new List<String>();
        global static List<Attachment> AttachmentList = new List<Attachment>();
        global static string DeliveryInstruction;
        global static string DumpsterSizeParser;
        global static string DumpsterSize;
        global static String AccountName;
        global static id AccountIdVal;
        global static String response;
        global static String EmailBodyCont;
        global static String EmailplainBodyCont;
        global static String FromEmailAddress;            //Ticket 20245
        global static String DropOffVisitTime;
        global static string purchaseOrderNo; 
        global static string failedemailsubject;
        global static string ParsedContent;
        public Boolean Dumpsterstatus = false;
        public Dumpsters__c Createddumpster = new Dumpsters__c();


/*=========================================================================================
*Method Name     : handleInboundEmail
*Description     : Handling inbound mail from the email service
*Arguments       : Getting inbound mail and uploading the pdf to the uploadFile method
=========================================================================================*/


      global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope) {
          
          try{
              system.debug('>>>From Email<<<' + email.fromAddress);
              if(email.fromAddress != null)
              {
                  FromEmailAddress = email.fromAddress;            //Ticket 20245
              }
               system.debug('<<<email>>>'+email);
               if(email.htmlbody != null)
               {
              
                   system.debug('<<<email.htmlbody>>>'+email.htmlbody);
               }
          if(email.plainTextBody != null || (email.plainTextBody == null && email.htmlbody != null)){     // Ticket No : 12623
          system.debug('<<<email.plainTextbody>>>'+email.plainTextBody);
              if(email.plainTextBody != null && email.plainTextBody != '')
              {
                  EmailBodyCont      = email.plainTextBody;
                  EmailplainBodyCont = email.plainTextBody;
              }
              else if((email.plainTextBody == null || email.plainTextBody == '') && email.htmlbody != null && email.htmlbody != '')
              {
                  EmailBodyCont      = email.htmlbody.replace('&nbsp;',' ').stripHtmlTags();
              }
              
              failedemailsubject = email.Subject;
              
               system.debug('EmailBodyCont >>>00 '+EmailBodyCont);  
               system.debug('EmailplainBodyCont>>>00 '+EmailplainBodyCont);
                    
              if(email.Subject != null){
                 
                 system.debug('EmailBodyCont >>>1 '+EmailBodyCont);  
                 system.debug('EmailplainBodyCont>>>1 '+EmailplainBodyCont);
                    
                  if(email.subject.containsIgnoreCase('Revised'))
                  {
                      Revised_Email_Alert(EmailBodyCont,email);
                  }
                  else
                  {
                  if(email.subject.contains('Final Pick Up')|| email.subject.contains('Final Removal')){
                      updateDumpsterRecord(EmailBodyCont,email);
                  }
                  
                  if(email.subject.contains('Liberty Dumpster')){
                      
                      String SwitchoutCheck = EmailBodyCont.substringAfter('PLACEMENT/PERMIT:').substringbefore('DELIVERY DATE & TIME:');
                      
                      if(SwitchoutCheck.containsignorecase('switchout'))
                      {
                          system.debug('Switchout Check');
                          CloneLibertyDumpster(EmailBodyCont,email);
                      }
                      else
                      {
                          InsertLibertyDumpster(EmailBodyCont,email);
                      }
                  }
                  if(email.subject.contains('(PO#) CH') || email.subject.contains('(PO#) AD')){
                      InsertAffordableDumpster(EmailBodyCont,email);
                  }
                  if(email.subject.containsIgnoreCase('yard Delivery -') || email.subject.containsIgnoreCase('cubic yard container')){
                      Insert_Discount_Dumpster(EmailBodyCont,email);
                      system.debug(email.subject);
                  }
                  if(email.subject.containsIgnoreCase('yard swap -') || email.subject.containsIgnoreCase('- Swap')){
                      Upsert_Discount_Dumpster(EmailBodyCont,email);
                      system.debug(email.subject);
                  }
                  if(email.subject.containsIgnoreCase('New Dumpster requested for Deal'))
                  {
                      Detritus_Dumpster_Insert(EmailBodyCont,email);
                  }
                  If(email.subject.containsIgnoreCase('New Enquiry from')){    //Ticket No : 16176
                        EmailPDFLeadParsingHandler.CreateLead(EmailBodyCont,email);
                     }
                    If(email.subject.containsIgnoreCase('Get a Quote - new submission')){
                       EmailPDFLeadParsingHandler.createLeadOnNewSubmission(EmailBodyCont,email);
                    }
                    If(email.subject.contains('- New Delivery ') || email.subject.contains('? New Delivery') || email.subject.contains('| New Delivery'))     //Ticket No : 40528,52692
                    {
                        DumpsterNewDelivery(EmailBodyCont,email);
                        system.debug(email.subject);
                    }
                    
                    if((email.subject.containsIgnoreCase('PO#') && email.subject.containsIgnoreCase('SWAP')))//61711
                    {
                        Upsert_Bargain_Dumpster(EmailBodyCont,email);
                        system.debug(email.subject);
                    }
                  
                    system.debug('EmailBodyCont >>> '+EmailBodyCont);  
                    system.debug('EmailplainBodyCont>>> '+EmailplainBodyCont);
                    
                   // if( email.subject.containsIgnoreCase('NEW') && !(email.subject.containsIgnoreCase('New Delivery')) && !(email.subject.containsIgnoreCase('Liberty Dumpster')))//62009 //63028 //63734  //!(email.subject.containsIgnoreCase('Liberty Dumpster')- 65753
                   // if(((((email.plainTextBody != null || email.plainTextBody != '')&& email.plainTextBody.containsIgnoreCase('Bargain Dumpster') ) ||((email.htmlbody != null || email.htmlbody != '')&& email.htmlbody .containsIgnoreCase('Bargain Dumpster')))  && email.subject.containsIgnoreCase('NEW')) && !(email.subject.containsIgnoreCase('New Delivery')) && !(email.subject.containsIgnoreCase('Liberty Dumpster')))//62009 //63028 //63734  //!(email.subject.containsIgnoreCase('Liberty Dumpster')- 65753 //70112
                   //if( ( EmailBodyCont.containsIgnoreCase('Bargain Dumpster')  ||  EmailplainBodyCont.containsIgnoreCase('Bargain Dumpster') ) && (email.subject.containsIgnoreCase('NEW') && !(email.subject.containsIgnoreCase('New Delivery')) && !(email.subject.containsIgnoreCase('Liberty Dumpster'))))//62009 //63028 //63734  //!(email.subject.containsIgnoreCase('Liberty Dumpster')- 65753 //70112
                    if( ( (EmailBodyCont!= null  && EmailBodyCont.containsIgnoreCase('Bargain Dumpster'))  || (EmailplainBodyCont!= null  && EmailplainBodyCont.containsIgnoreCase('Bargain Dumpster')) ) && (email.subject.containsIgnoreCase('NEW') && !(email.subject.containsIgnoreCase('New Delivery')) && !(email.subject.containsIgnoreCase('Liberty Dumpster'))))//62009 //63028 //63734  //!(email.subject.containsIgnoreCase('Liberty Dumpster')- 65753 //70112  //70682
                    {
                        BargainDumpster_insert(EmailBodyCont,email);
                        system.debug('bargain subj >> '+email.subject);
                    }
                          
                         // || EmailBodyCont != '') - Removed this Condition  ---->Attempt to de-reference a null object (Class.EmailPDFParsingHandler.handleInboundEmail: line 141, column 1)
                         
                   // if( (email.subject.containsIgnoreCase('PO#') && (email.subject.containsIgnoreCase('FINAL PICK UP'))) ||email.subject.containsIgnoreCase('FINAL PICK UP')||email.subject.containsIgnoreCase('FINAL PICKUP')) //65943 )
                   // if( ( (((email.plainTextBody != null || email.plainTextBody != '')&& email.plainTextBody.containsIgnoreCase('Bargain Dumpster') ) ||((email.htmlbody != null || email.htmlbody != '')&& email.htmlbody .containsIgnoreCase('Bargain Dumpster'))) && ((email.subject.containsIgnoreCase('PO#') && (email.subject.containsIgnoreCase('FINAL PICK UP'))) ||email.subject.containsIgnoreCase('FINAL PICK UP')||email.subject.containsIgnoreCase('FINAL PICKUP')))) //70112
                   // if( ( EmailBodyCont.containsIgnoreCase('Bargain Dumpster')  ||  EmailplainBodyCont.containsIgnoreCase('Bargain Dumpster') ) && ((email.subject.containsIgnoreCase('PO#') && (email.subject.containsIgnoreCase('FINAL PICK UP'))) ||email.subject.containsIgnoreCase('FINAL PICK UP')||email.subject.containsIgnoreCase('FINAL PICKUP'))) //65943 ) //70112
                    if( ( (EmailBodyCont!= null && EmailBodyCont.containsIgnoreCase('Bargain Dumpster'))  || (EmailplainBodyCont!= null  && EmailplainBodyCont.containsIgnoreCase('Bargain Dumpster')) ) && ((email.subject.containsIgnoreCase('PO#') && (email.subject.containsIgnoreCase('FINAL PICK UP'))) ||email.subject.containsIgnoreCase('FINAL PICK UP')||email.subject.containsIgnoreCase('FINAL PICKUP'))) //65943 ) //70112  //70682
                    {
                        Update_FinalPickup_Bargain_Dumpster(EmailBodyCont,email);
                         system.debug('bargain pickup subj >> '+email.subject);
                    }
                 }
              }
          }
          
          if (email.binaryAttachments != null && !email.subject.containsIgnoreCase('Revised'))
            {
                  for(Messaging.Inboundemail.BinaryAttachment bAttachment : email.binaryAttachments)
                   {
                     ParsedContent='';
                     System.debug('File Name :'+bAttachment.fileName);
                     
                     if(bAttachment.fileName.endsWith('.pdf') || bAttachment.fileName.endsWith('.PDF') ){   //12742
                     
                    //  uploadFile(bAttachment.Body,bAttachment.fileName,' https://www.merfantz.com/customer_coding_check/pdfparse/pdfparser/pdfdemos/uploadfile.php',email); // test url
                      uploadFile(bAttachment.Body,bAttachment.fileName,' https://www.haul-brooke.com/pdfparse/pdfdemos/uploadfile.php',email);    //18097
                     // uploadFile(bAttachment.Body,bAttachment.fileName,' https://www.haul-brooke.com/pdfparsenew/pdfdemos/uploadfile.php',email);
                         
                         system.debug('<<< ParsedContent >>> '+ParsedContent);
                         if(ParsedContent!= ''){
                     If(email.subject.contains('Payment Receipt')){    //Ticket No : 14029
                        EmailPDFInvoiceParsingHandler.UpdateDumpsterInvoice(ParsedContent,bAttachment.fileName,bAttachment.Body,email,failedemailsubject);
                     }
                     else If(email.subject.containsIgnoreCase('Empty and Return')){    //Ticket No : 19261
                        CloneDumpsterRecord(ParsedContent,bAttachment.fileName,bAttachment.Body,email);
                     }
                     else If(email.subject.containsIgnoreCase('Swap Out')){    //Ticket No : 30652
                        SwapoutDumpsterRecord(ParsedContent,bAttachment.fileName,bAttachment.Body,email);
                     } 
                   /*
                     else if(email.subject.containsIgnoreCase('Purchase Order'))//60964
                     {
                         system.debug('Bargain>>>> ');
                         BargainDumpsterRecord(ParsedContent,bAttachment.fileName,bAttachment.Body,email);
                     }
                     */
                     else {
                        system.debug('Response Message --->>'+ParsedContent);
                        system.debug('Response Message ---else');
                       InsertDumpsterRecord(ParsedContent,bAttachment.fileName,bAttachment.Body,email);
                     }
                         }}
                   }
           }
           Email_Forward(email, envelope);
           }
           catch(Exception e)
           {
               system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);
           }
          
          Messaging.InboundEmailResult result = new Messaging.InboundEmailresult();
          return result;
      }
      
        public static void send_Reply(List<Id> DumpsterId, Messaging.InboundEmail email)
        {
            Messaging.SingleEmailMessage Reply_mail = new Messaging.SingleEmailMessage();
            List<Messaging.EmailFileAttachment> mailattachments = new List<Messaging.EmailFileAttachment>();
            Dumpsters__c Dumpster = new Dumpsters__c();
            List<Dumpsters__c> DumpsterList = new List<Dumpsters__c>();
            Map<Id, PDF_Parser_Email__c> PDF_Email = new Map<Id, PDF_Parser_Email__c>();
            OrgWideEmailAddress owea = [SELECT Id, Address, DisplayName FROM OrgWideEmailAddress where Id =: Label.OWA_Id];
            try
            {
                
                for(PDF_Parser_Email__c PDF_Parser_EmailFor : [Select id, Name, Account_Id__c, Email__c from PDF_Parser_Email__c])
                {
                    PDF_Email.put(PDF_Parser_EmailFor.Account_Id__c, PDF_Parser_EmailFor);
                }
                
                system.debug(DumpsterId);
                
                for(Dumpsters__c DumpsterFor : [Select id, Name, Delivery_Address__c, AAccountccount__c, AAccountccount__r.Name, Purchase_Order__c, Drop_Off_Visit_Date__c, Status__c, Confirmed_Pick_Up_Date__c, Phone_Number_2__c from Dumpsters__c where Id =: DumpsterId])
                {
                    Dumpster = DumpsterFor;
                    DumpsterList.add(DumpsterFor);
                }
                if(PDF_Email.containsKey(Dumpster.AAccountccount__c))
                {
                    Reply_mail.setToAddresses(PDF_Email.get(Dumpster.AAccountccount__c).Email__c.split(';'));
                    Reply_mail.setCcAddresses(new String[] {Label.PDF_Parser_CC_Email});
                }
                else
                {
                    Reply_mail.setToAddresses(new String[] {Label.PDF_Parser_CC_Email});
                }
                String Email_Body = 'Dear Sir / Madam,\n\nYour Dumpster order for ' + Dumpster.AAccountccount__r.Name + ' has been successfully ';
                Email_Body += Dumpster.Status__c == 'Request for Pick-Up' ? 'updated.\n\n' : 'added.\n\n';
                for(Dumpsters__c DumpsterFor : DumpsterList)
                {
                    Email_Body += 'Dumpster Name : ' + DumpsterFor.Name + '\n';
                    Email_Body += 'Purchase Order Number : ' + DumpsterFor.Purchase_Order__c + '\n';
                    Email_Body += 'Delivery Address : ' + DumpsterFor.Delivery_Address__c + '\n';
                    if(DumpsterFor.Status__c == 'Request for Pick-Up')
                    {
                        Email_Body += 'Confirm Pick-up Date : ' + DateTime.newInstance(DumpsterFor.Confirmed_Pick_Up_Date__c.year(), DumpsterFor.Confirmed_Pick_Up_Date__c.month(), DumpsterFor.Confirmed_Pick_Up_Date__c.day()).format('MM/dd/yyyy') + '\n\n';
                    }
                    else
                    {
                        Email_Body += 'Phone : ' + DumpsterFor.Phone_Number_2__c + '\n';
                        Email_Body += 'Drop-off Visit Date : ' + DateTime.newInstance(DumpsterFor.Drop_Off_Visit_Date__c.year(), DumpsterFor.Drop_Off_Visit_Date__c.month(), DumpsterFor.Drop_Off_Visit_Date__c.day()).format('MM/dd/yyyy') + '\n\n';
                    }
                    
                    Email_Body += 'Internal record link: ' + System.URL.getSalesforceBaseUrl().toExternalForm() + '/' + DumpsterFor.Id + '\n\n';
                }
                Email_Body += 'Thank you for your business!\n\nWarren Bidmead\noperations@haul-brooke.com\n\nHaulbrooke\nCustomer Service\nAustin (512) 265 1000 | Houston (713) 742 6070 | San Antonio (210) 716 0000\n\n';
            
                Reply_mail.setSubject('Re: ' + email.subject);
                Reply_mail.setOrgWideEmailAddressId(owea.Id);
                
                if(email.htmlbody != null)
                {
                    Reply_mail.setHtmlBody(Email_Body.replace('\n','<br/>') + email.htmlbody);
                }
                if(email.plainTextBody != null)
                {
                    Reply_mail.setPlainTextBody(Email_Body + email.plainTextBody);
                }
                Reply_mail.setSaveAsActivity(false);
                system.debug(email.binaryAttachments);
                if(email.binaryAttachments != null)
                {
                    for(Messaging.Inboundemail.BinaryAttachment bAttachment : email.binaryAttachments)
                    {
                        Messaging.EmailFileAttachment efa4 = new Messaging.EmailFileAttachment();
                        efa4.setFileName(bAttachment.fileName);
                        efa4.setBody(bAttachment.Body);
                        mailattachments.add(efa4);
                    }
                }
                if(mailattachments.size() > 0)
                {
                    Reply_mail.setFileAttachments(mailattachments);
                }
                
                
                Messaging.sendEmail(new Messaging.SingleEmailMessage[] {Reply_mail});
                
            }
            catch(exception e)
            {
                System.debug('Exception raised due to ->'+e);
            }
        
        }
      
      public void Email_Forward(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope)
      {
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Forward_Mail; 
            System.debug(EmailToAddress);
            
            try
            {
                if(EmailToAddress!=null && EmailToAddress!='Test')
                {
                    List<Messaging.EmailFileAttachment> mailattachments = new List<Messaging.EmailFileAttachment>();
                    String[] toAddresses = new String[] {EmailToAddress};
                    mail.setToAddresses(toAddresses);
                    mail.setSubject(email.subject);
                    if(email.htmlbody != null)
                    {
                        mail.setHtmlBody(email.htmlbody);
                    }
                    if(email.plainTextBody != null)
                    {
                        mail.setPlainTextBody(email.plainTextBody);
                    }
                    system.debug(email.binaryAttachments);
                    if(email.binaryAttachments != null)
                    {
                        for(Messaging.Inboundemail.BinaryAttachment bAttachment : email.binaryAttachments)
                        {
                            Messaging.EmailFileAttachment efa4 = new Messaging.EmailFileAttachment();
                            efa4.setFileName(bAttachment.fileName);
                            efa4.setBody(bAttachment.Body);
                            mailattachments.add(efa4);
                        }
                    }
                    if(mailattachments.size() > 0)
                    {
                        mail.setFileAttachments(mailattachments);
                    }
                    mail.setSaveAsActivity(false);
                    Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
                }
            }
            catch(exception e)
            {
            System.debug('Exception raised due to ->'+e);
            }
          
      }

/*=========================================================================================
*Method Name     : public static void UploadFile(Blob file_body, String file_name, String reqEndPoint , Messaging.InboundEmail email)
*Description     : Parsing PDF and Create Dumpster
*Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Creation
*Method Updated : Ticket No :14965
=========================================================================================*/

      
      public static void UploadFile(Blob file_body, String file_name, String reqEndPoint , Messaging.InboundEmail email){
      
          String boundary = '----------------------------741e90d31eff';
          String header = '--'+boundary+'\nContent-Disposition: form-data; name="file_upl"; filename="'+file_name+'";\nContent-Type: application/octet-stream';
          
          String footer = '--'+boundary+'--';             
          String headerEncoded = EncodingUtil.base64Encode(Blob.valueOf(header+'\r\n\r\n'));
          while(headerEncoded.endsWith('='))
          {
           header+=' ';
           headerEncoded = EncodingUtil.base64Encode(Blob.valueOf(header+'\r\n\r\n'));
          }
          String bodyEncoded = EncodingUtil.base64Encode(file_body);
         
     
          Blob bodyBlob = null;
          String last4Bytes = bodyEncoded.substring(bodyEncoded.length()-4,bodyEncoded.length());
     
          
         if(last4Bytes.endsWith('==')) {
            last4Bytes = last4Bytes.substring(0,2) + '0K';
            bodyEncoded = bodyEncoded.substring(0,bodyEncoded.length()-4) + last4Bytes;
            // We have appended the \r\n to the Blob, so leave footer as it is.
            String footerEncoded = EncodingUtil.base64Encode(Blob.valueOf(footer));
            bodyBlob = EncodingUtil.base64Decode(headerEncoded+bodyEncoded+footerEncoded);
          } else if(last4Bytes.endsWith('=')) {
            last4Bytes = last4Bytes.substring(0,3) + 'N';
            bodyEncoded = bodyEncoded.substring(0,bodyEncoded.length()-4) + last4Bytes;
            footer = '\n' + footer;
            String footerEncoded = EncodingUtil.base64Encode(Blob.valueOf(footer));
            bodyBlob = EncodingUtil.base64Decode(headerEncoded+bodyEncoded+footerEncoded);              
          } else {
            footer = '\r\n' + footer;
            String footerEncoded = EncodingUtil.base64Encode(Blob.valueOf(footer));
            bodyBlob = EncodingUtil.base64Decode(headerEncoded+bodyEncoded+footerEncoded);  
          }
       try{
          HttpRequest req = new HttpRequest();
          req.setHeader('Content-Type','multipart/form-data; boundary='+boundary);
          req.setMethod('POST');
          req.setEndpoint(reqEndPoint);
          req.setBodyAsBlob(bodyBlob);
          req.setTimeout(120000);
          Http http = new Http();
          HTTPResponse res = http.send(req);
          string strResponse = res.getBody();
          ParsedContent=strResponse ;
          system.debug('ParsedContent >>> '+ParsedContent);
          }
          catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);  //12724
            }  
         
    }   
    public static void InsertDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email){
      List<Dumpsters__c> InsertDumpsterList = new List<Dumpsters__c>();
      List<String> DumpsterRow; 
      List<String> FinalRowList = new List<String>();
      Integer HeavyIndexCount=0;
      Integer HBIndexCount=0;
      String FirstContainsString;
      String SecondContainsString;
      Integer FirstContainsIgnore=0;
      Dumpsters__c dumpster;
      Integer PurchaseOrderCount=0;
      integer ListIndex=0;
      Integer PartsCount;
      Integer endCount;
      string PartsResult;
     
     
     if(ParsedContent != null) 
          {
            try{
            
                string resReplaceLine = strResponse.replace('\n','<br>');
                           system.debug('<<<email.plainTextBody>>>'+email.plainTextBody);     
                strResponse = strResponse.replace('\n','<br>');
                strResponse = strResponse.replace('??','fi'); // Ticket No : 12662
                System.debug('<<<strResponse>>>'+strResponse);
                if(strResponse.contains('<pre><br>')){        //16534
                    AccountName = strResponse.SubStringAfter('<pre><br>').SubstringBefore('<br>');
                    AccountName = AccountName.replace(' LLC','');
                    system.debug('Account Name '+ACcountName);    
                }else {
                    AccountName = strResponse.SubString(strResponse.IndexOf('<pre>')+5,strResponse.IndexOf('<br>')-4) ;
                }
                System.debug('<<<strResponse>>>'+strResponse);
                System.debug('<<<Account>>>'+AccountName);
                
                //Process for Number of PO Numberfinding   
                if(strResponse.Contains('<br>PO Date')){ 
                PartsCount  = strResponse.IndexOf('<br>PO Date');
                endCount = strResponse.IndexOf('<br>Delivery');
                PartsResult = strResponse.SubString(PartsCount+30,endCount-1);
                PartsResult = PartsResult.Replace('<br>',''); 
                purchaseOrderNumber = PartsResult;
                if(purchaseOrderNumber.contains('\t')){     // Ticket No : 13558
                    purchaseOrderNumber = purchaseOrderNumber.SubStringAfter('\t');
                    system.debug('Po Number is'+purchaseOrderNumber);
                }
                system.debug('Po Number in outside'+purchaseOrderNumber);
                }
                else if(strResponse.Contains('Confirmation #')){  //55160
                    string PurchaseNoString = StrResponse.SubstringAfter('Confirmation<br>Date').SubstringBefore('<br>Delivery Address  Rep Delivery Date   <br>');
                                    purchaseOrderNumber = PurchaseNoString.SubstringAfter('Confirmation #').substringAfter('\t').substringAfter('<br>').substringAfter('\t').subStringBefore('<br>Delivery Address').substringAfter('\t').substringAfter('\t').substringAfter('\t').trim();     //18277                 
                                   system.debug(PurchaseNoString.SubstringAfter('Confirmation #   <br>')+'purchaseOrderNumber '+PurchaseNoString );
                                    system.debug('purchaseOrderNumber '+purchaseOrderNumber);
                    
                }
                else{                                                             //16534
                    string PurchaseNoString = StrResponse.SubstringAfter('<br>DUMPSTER ORDER').SubstringBefore('<br>Delivery Address  Rep Delivery Date   <br>');
                    system.debug('PurchaseNoString '+PurchaseNoString);
                    
                    purchaseOrderNumber = PurchaseNoString.SubstringAfter('PO Date').substringAfter('<br>').subStringBefore('<br>Delivery Address').substringAfter('\t').substringAfter('\t').substringAfter('\t').substringAfter('\t').trim();     //18277                 
                    system.debug('purchaseOrderNumber '+purchaseOrderNumber);
                }
                system.debug('Po Number '+purchaseOrderNumber);
                String StrDate=strResponse.SubstringBefore('Order Type').SubStringAfter('Delivery Date');
                System.debug('StrDate1'+StrDate);
                if(StrDate.Contains('<br> <br>')){
                    StrDate=StrDate.replace('<br> <br>','<br>');
                    Integer StrLen=strDate.length();
                    PartsResult = StrDate.SubString(StrLen-18,StrLen-6);
                     System.debug('PartsResult:'+PartsResult);
                   
                }
                
                else{
                  PartsCount  = strResponse.IndexOf('<br>Order Type');
                  System.debug('PartsCount>>11.>>'+PartsCount);
                  PartsResult = strResponse.SubString(PartsCount-11,PartsCount);        //Ticket 21010
                 }
                              
                  //PartsResult = StrDate.SubString(StrLen-18,StrLen-6);
                              
               /* 
                //Process for Number of Delivery Date
                System.debug('strResponse'+strResponse);
                System.debug('PartsCount'+PartsCount);

                PartsCount  = strResponse.IndexOf('Order Type');
                                System.debug('PartsCount'+PartsCount);

                PartsResult = strResponse.SubString(PartsCount-22,PartsCount-11);
                                System.debug('PartsResult'+PartsResult);
                */
                
                DumpsterDropOffvisitDate=PartsResult.split('/');
                
                
                //Process for Delivery Instruction
                PartsCount  = strResponse.IndexOf('<br>Delivery Instructions');
                endCount = strResponse.IndexOf('<br>Contacts For Delivery');
                PartsResult = strResponse.SubString(PartsCount+25,endCount);
                PartsResult = PartsResult.Replace('<br>','');
                DeliveryInstruction = PartsResult; 
                
                //Process for Delivery Instruction
                PartsCount  = strResponse.IndexOf('<br>Delivery Instructions');
                endCount = strResponse.IndexOf('<br>Contact');
                PartsResult = strResponse.SubString(PartsCount+25,endCount);
                PartsResult = PartsResult.Replace('<br>','\n');
                DeliveryInstruction = 'Drop Off Instruction :' +PartsResult;
                DeliveryInstruction = Label.Update_Comments_Field +'\n' +PartsResult;
                
                String CallPhoneNumber;
                
                //String DeliveryInstructionsPhoneNumber = strResponse.tolowercase().substringAfter('<br>delivery instructions').substringbefore('<br>contacts for delivery').substringAfter('<br>special requests:').substringAfter('<br>').substringAfter('<br>').substringAfter('-').trim();
              
                String DeliveryInstructionsPhoneNumber = strResponse.tolowercase().substringAfter('<br>delivery instructions').substringafter('<br>contacts for delivery').substringAfter('<br>').substringAfter('<br>').substringbefore('<br>Service Issue:').substringbefore('<br>').trim();    //ticket no:57269
                CallPhoneNumber = DeliveryInstructionsPhoneNumber;
                system.debug('CallPhoneNumber ><><><'+CallPhoneNumber );
                
                if(PartsResult.containsignorecase('call in route'))
                {
                    CallPhoneNumber = PartsResult.tolowercase().substringAfter('call in route').substringbefore('<br>').substringbefore('**');
                    String[] cell = new String[]{};
                    System.debug(CallPhoneNumber);
                    if(CallPhoneNumber.length() >= 14)  
                      cell = CallPhoneNumber.split(' ');
                    if(cell.size() > 0)    CallPhoneNumber = cell[cell.size() - 1];
                }
                
                system.debug('<><<?CallPhoneNumber'+CallPhoneNumber);
                
                PartsCount  = strResponse.IndexOf('Contacts For Delivery<br>');
                endCount = strResponse.IndexOf('<br>Service');
                PartsResult = strResponse.SubString(PartsCount,endCount);
                PartsResult = PartsResult.Replace('<br>','\n');
                String DeliveryInstruction1 = PartsResult;
                
                
                PartsCount  = strResponse.IndexOf('Delivery Date');
                if(strResponse.contains('TX ')){
                    endCount = strResponse.IndexOf('TX ');                                                                        //12802
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX ')+8);    //12802
                    
                }
                else if(strResponse.contains('TX<br>')){
                    endCount = strResponse.IndexOf('TX<br>');                                                                        //12802
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX<br>')+12);    //12802
                    PartsResult = PartsResult.Replace('TX<br>','TX ');
                    
                }
                
                if(strResponse.contains('TX <br>')){
                    endCount = strResponse.IndexOf('TX <br>');                                                                        //14277
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX <br>')+12);    //14277
                    PartsResult = PartsResult.Replace('TX <br>','TX ');
                }
                if(strResponse.contains('TX ,')){                          //16534
                    system.debug('inside the TX ,');
                    endCount = strResponse.IndexOf('TX ,');                                                                        
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+15);    
                    PartsResult = PartsResult.Replace('\t<br>','');
                }
                
                if(strResponse.contains('Texas ,'))
                {
                    system.debug('inside the Texas ,');
                    EndCount = strResponse.IndexOf('Texas ,');                                                                       
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+18);   
                    PartsResult = PartsResult.Replace('/t',''); 
                    PartsResult = PartsResult.Replace('<br>','');
                }
                
                system.debug(PartsResult);
                PartsResult = PartsResult.Replace('<br>',' , ');
                String DeliveryAddress = PartsResult;
                DeliveryAddress = DeliveryAddress.replaceAll('\\t+', ' ');
                DeliveryAddress = DeliveryAddress.replaceAll(',  ', ', ');
                system.debug('DeliveryAddress --->>'+DeliveryAddress);                
                //Process of Dumpster Size 
                DumpsterSizeParser = strResponse.SubString(strResponse.IndexOf('<br>Qty'),strResponse.IndexOf('</pre>'))+'</pre>';
                system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                
                // Getting DumpsterRow from the PDF Ticket No: 14965              
                DumpsterRow = DumpsterSizeParser.split('yard');
                System.debug('<<<DumpsterRow>>>'+DumpsterRow); 
                
                
                
                if(DumpsterSizeParser.contains('- -')){
                   HBIndexCount = DumpsterSizeParser.IndexOf('- -');
                }

                 if(DumpsterSizeParser.contains('- HEAVY -')){
                  HeavyIndexCount= DumpsterSizeParser.IndexOf('- HEAVY -');
                  }

                 System.debug('HBIndexCount--'+HBIndexCount+' '+'HeavyIndexCount-- '+HeavyIndexCount);
                 
                 if(HBIndexCount<HeavyIndexCount && HeavyIndexCount>0 && HBIndexCount>0 )
                {
                FirstContainsString='- -';
                SecondContainsString='- HEAVY -';
                
                }else{
                
                FirstContainsString='- HEAVY -';
                SecondContainsString='- -';
                }
               
                System.debug('FirstContainsString--'+FirstContainsString+' '+'SecondContainsString-- '+SecondContainsString);
                
                
                System.debug('<<<<DumpsterSizeParser>>>'+DumpsterSizeParser);
                System.debug('<<DumpsterRow.size()>>'+DumpsterRow.size());   
                
                for(Integer i=1;i<DumpsterRow.size();i++){
                   
                   if(DumpsterSizeParser.contains(FirstContainsString)){
                      System.debug('<<FirstContainsIgnore>>'+FirstContainsIgnore);
                      if(FirstContainsIgnore==0){
                           DumpsterSizeParser='-R-'+DumpsterSizeParser.substringAfter(FirstContainsString);
                           FirstContainsIgnore=1;
                      }
                      if(FirstContainsIgnore==1){
                        
                       if(FinalRowList.size()>0)
                            FinalRowList.add(DumpsterSizeParser.substringBefore(FirstContainsString));
                       else
                            FinalRowList.add(DumpsterSizeParser.substringBefore(FirstContainsString));
                       
                        //DumpsterSizeParser='-R-'+DumpsterSizeParser.substringAfter(FirstContainsString);
                        System.debug('<<<<DumpsterSizeParser>>>'+DumpsterSizeParser);
                       }
                   }
                   else if(DumpsterSizeParser.contains(SecondContainsString))
                   {
                     if(FirstContainsIgnore==0){
                            DumpsterSizeParser='-R-'+DumpsterSizeParser.substringAfter(SecondContainsString);
                            FirstContainsIgnore=1;
                     }
                     system.debug('==DumpsterSizeParser=='+DumpsterSizeParser);
                     if(FirstContainsIgnore==1){
                       if(FinalRowList.size()>0)
                             FinalRowList.add(DumpsterSizeParser.substringBefore(SecondContainsString));
                       else
                             FinalRowList.add(DumpsterSizeParser.substringBefore(SecondContainsString));
                       
                       
                       //DumpsterSizeParser='-R-'+DumpsterSizeParser.substringAfter(SecondContainsString);
                       System.debug('<<<<DumpsterSizeParser>>>'+DumpsterSizeParser);
                     }
                    
                   }
                   else if(DumpsterSizeParser.contains('</pre>'))
                     FinalRowList.add(DumpsterSizeParser);
                             
                 
                }
                  System.debug('<<<FinalRowList>>>'+FinalRowList);         

               /*
                if(DumpsterSizeParser.contains('- -'))
                     {
                     DumpsterSize = DumpsterSizeParser.SubString(DumpsterSizeParser.IndexOf('- -')+4,DumpsterSizeParser.IndexOf('yard')+4);
                     }
                else if(DumpsterSizeParser.contains('- HEAVY -'))
                 {
                     DumpsterSize = DumpsterSizeParser.SubString(DumpsterSizeParser.IndexOf('- HEAVY -')+10,DumpsterSizeParser.IndexOf('yard')+4);
                     system.debug('DumpsterSize Values  ---&&>>'+DumpsterSizeParser.SubString(DumpsterSizeParser.IndexOf('- HEAVY -')+10,DumpsterSizeParser.IndexOf('yard')+5));
                 }
                //DumpsterSize = strResponse.SubString(strResponse.IndexOf('yard')-3,strResponse.IndexOf('yard')-1);
                */
                //Getting a Time to Update the Drop Off visit / time field
                DateTime CurrentTime = system.now();
                system.debug('CurrentTime is ' +CurrentTime);
            //  String myDate = CurrentTime.format('yyyy-MM-dd HH:mm:ss', 'PST');
                Datetime now = system.now();
                Long getHour = now.hour();
                system.debug('getHour' +getHour);
                
                //Process of AccountIDfinding 
                ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');  // Ticket No : 12623
                if(mc.EnableTestAccount__c){
                    AccountIdval = mc.TestAccountID__c;
                    system.debug('accid is'+AccountIdval);
                }else{
                    String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                    system.debug('account name list is--->'+AccountQuery);
                    AccountIdval = (Database.query(AccountQuery)).id;
                    system.debug('account name list is--->'+accountIdval);
                } 
                //Process of Dumpster Creation
                
                
                
                for(String DumpSize : FinalRowList){
                    PurchaseOrderCount++;
                    dumpster                   = new Dumpsters__c();
                
                    dumpster.AAccountccount__c              = AccountIdval ;
                    dumpster.Email_Success_helper__c        = AccountIdval ;
                    //dumpster.PDF_From_Email__c              = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                    dumpster.Status__c                      = 'Unscheduled';
                    //dumpster.DifferentDriverSameAddress__c  = TRUE;
                    if(FinalRowList.size()>1)
                        dumpster.Purchase_Order__c              = purchaseOrderNumber+'.'+PurchaseOrderCount;
                    else
                        dumpster.Purchase_Order__c              = purchaseOrderNumber; 
                    dumpster.Comments__c                    = DeliveryInstruction +'\n' +'\n' +DeliveryInstruction1 ;
                    dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                    dumpster.Dumpster_Size__c               = DumpSize.substringAfter('-R- ').substringBefore(' yard')+'yd';
                    if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                    {
                        dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                    }
                    dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
                    dumpster.Rental__c              = 'Dumpster Rental';
                    
                    String Concreteonly_check = strResponse.tolowercase().substringAfter('other notes').substringBefore('</pre>');
                    
                    if(Concreteonly_check.containsIgnoreCase('CONCRETE')){
                        dumpster.Fill_Details__c = 'Concrete Only';        //17285    //17274
                    }            
                    if(dumpster.Dumpster_Size__c == '40yd'){        //12804 we are using custom label 'Pdf parser Driver Assigner'
                       dumpster.Driver__c = Label.X40ydDriver;  
                    }
                    else if(dumpster.Dumpster_Size__c == '30yd'){
                       dumpster.Driver__c = Label.X30ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '20yd'){
                       dumpster.Driver__c = Label.X20ydDriver;
                    }
               
                    if(dumpster.Dumpster_Size__c == '40yd'){
                       dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '30yd'){
                       dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '20yd'){
                       dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                    }
                    
                    Set<String> HoustonZipcodes = new Set<String>();
                    integer Count; String trimmedZip ;
                    String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                    String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                    HoustonZipcodes.addall(Zipcode1);
                    HoustonZipcodes.addall(Zipcode2);
                    for(String zip : HoustonZipcodes){
                    trimmedZip = zip.trim();
                    if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                        Count= 1;
                    }
                    if(Count==1)
                    {
                        Dumpster.Houston_Helper__c = True; 
                        Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                        dumpster.Driver__c = label.HoustonDriver;
                        dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                    }
                    
                            
                             
                    if(strResponse.containsIgnoreCase('PM ') || strResponse.containsIgnoreCase('afternoon')){          // Ticket No : 12623 //15667
                        dumpster.Drop_Off_Visit_Time__c='2pm';
                    }else if(strResponse.containsIgnoreCase('AM ') || strResponse.containsIgnoreCase('morning')){
                        dumpster.Drop_Off_Visit_Time__c='9am';
                    }
                
                    if(DropOffVisitTime != null){
                        dumpster.Drop_Off_Visit_Time__c = DropOffVisitTime;
                    }
                    
                    
                    dumpster.Phone_Number_2__c = CallPhoneNumber;
                    
                    system.debug('>>>1 dumpster.Phone_Number_2__c >>'+dumpster.Phone_Number_2__c);
                    
                    String PhoneNumberCheck = strResponse.SubStringAfter('Contacts For Delivery').SubStringBefore('<br>Qty');
                    system.debug('>>>1 PhoneNumberCheck  >>'+PhoneNumberCheck );
                    if(PhoneNumberCheck.contains('<br>1 (')){
                        system.debug(PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>1 (')+5,PhoneNumberCheck.IndexOf('<br>1 (')+20));
                        dumpster.Phone_Number_2__c = PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>1 (')+5,PhoneNumberCheck.IndexOf('<br>1 (')+20);
                        string y = PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>1 (')+20,PhoneNumberCheck.IndexOf('Service Issue:'));
                    
                        if(y.contains('<br>(')){
                            system.debug(y.SubString(y.IndexOf('<br>(')+4,y.IndexOf('<br>(')+18));
                            dumpster.Phone_Number_22__c = y.SubString(y.IndexOf('<br>(')+4,y.IndexOf('<br>(')+18);
                        }
                    
                        else if(y.contains('<br>1 (')){
                            system.debug(y.SubString(y.IndexOf('<br>1 (')+5,y.IndexOf('<br>1 (')+20));
                            dumpster.Phone_Number_22__c = y.SubString(y.IndexOf('<br>1 (')+5,y.IndexOf('<br>1 (')+20);
                        }
                    }
                
                    else if(PhoneNumberCheck.contains('<br>(')){
                        system.debug(PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>(')+4,PhoneNumberCheck.IndexOf('<br>(')+18));
                        dumpster.Phone_Number_2__c = PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>(')+4,PhoneNumberCheck.IndexOf('<br>(')+18);
                        string y = PhoneNumberCheck.SubString(PhoneNumberCheck.IndexOf('<br>(')+18,PhoneNumberCheck.IndexOf('Service Issue:'));
                    
                        if(y.contains('<br>(')){
                            system.debug(y.SubString(y.IndexOf('<br>(')+4,y.IndexOf('<br>(')+18));
                            dumpster.Phone_Number_22__c = y.SubString(y.IndexOf('<br>(')+4,y.IndexOf('<br>(')+18);
                        }
                    
                        else if(y.contains('<br>1 (')){
                            system.debug(y.SubString(y.IndexOf('<br>1 (')+5,y.IndexOf('<br>1 (')+20));
                            dumpster.Phone_Number_22__c = y.SubString(y.IndexOf('<br>1 (')+5,y.IndexOf('<br>1 (')+20);
                        }
                
                    }
                    
                    system.debug('dumpster.Phone_Number_2__c ---1'+dumpster.Phone_Number_2__c);
                    system.debug('dumpster.Phone_Number_22__c ---1'+dumpster.Phone_Number_22__c);
                    
                    if(dumpster.Phone_Number_2__c == null || dumpster.Phone_Number_2__c == '')                       //If added for Ticket 34251
                    {
                        String PhoneNumber = strResponse.SubStringAfter('Contacts For Delivery').SubStringBefore('Service Issue:').SubStringAfter('<br>').SubStringAfter('<br>').SubStringBefore('<br>');
                        PhoneNumber = PhoneNumber.replace('<br>','').trim();
                        system.debug('PhoneNumber<:<><><><><><'+PhoneNumber);
                        dumpster.Phone_Number_2__c = PhoneNumber;
                    }

                  InsertDumpsterList.add(Dumpster);
                }
                
                if(InsertDumpsterList.size()>0){
                 insert InsertDumpsterList;
                }
               // insert dumpster;
                System.debug('<<<<<<InsertDumpsterList >>>>>>>'+InsertDumpsterList );
                
                
                
                for(Dumpsters__c Dump: InsertDumpsterList){
                //Process of PDF attachment creation
                Attachment att  = new Attachment();
                att.Name        = file_name;
                att.Body        = file_body;
                att.ParentId    = dump.Id;
                att.IsPrivate   = false;
                AttachmentList.add(att);
                
                system.debug('<<<email.plainTextBody>>>'+email.plainTextBody);
                //Process of Email attachment creation
                Attachment EmlAttachment   = new Attachment();
                EmlAttachment.Name         = email.Subject + '.eml';
                
                
                if(email.htmlBody != null)
                {
                    EmailBodyCont      = email.htmlbody.replace('&nbsp;',' ').stripHtmlTags();
                    EmlAttachment.Body         = Blob.valueOf(EmailBodyCont);
                }
                else
                {
                    EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                }
                EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                EmlAttachment.ParentId     = dump.Id;
                EmlAttachment.IsPrivate    = false;
                AttachmentList.add(EmlAttachment);
                
                if(FinalRowList[ListIndex].contains('Please note')){
                PartsCount  = (FinalRowList[ListIndex].IndexOf('Please note'));
                if(FinalRowList[ListIndex].contains('\t<br>1')){         //16912
                    endCount = FinalRowList[ListIndex].IndexOf('\t<br>1');
                }else if(FinalRowList[ListIndex].contains('\t<br>2')){  
                    endCount = FinalRowList[ListIndex].IndexOf('\t<br>2');
                }else if(FinalRowList[ListIndex].contains(AccountName)){
                    endCount = FinalRowList[ListIndex].IndexOf(AccountName);
                }else if(FinalRowList[ListIndex].contains('</pre>')){
                    endCount = FinalRowList[ListIndex].IndexOf('</pre>');
                }
                PartsResult = FinalRowList[ListIndex].SubString(PartsCount,endCount);
                String OtherNotes = PartsResult;
                system.debug('OtherNotes are <---------------------> ' +OtherNotes);
                
                //SendingmailwithotherNotes(OtherNotes,dump.id);   //Commented for 19638
                }  
                ListIndex++;
                }   
                //Process of Attachment creations
             
                if(AttachmentList.size()>0){
                system.debug('attachment list size '+attachmentlist.size());
                    insert AttachmentList;
                }
                
                List<Id> DumpstersId = new List<Id>();
                for(Dumpsters__c DumpstersFor : InsertDumpsterList)
                {
                    DumpstersId.add(DumpstersFor.Id);
                }
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email);
                }
             
                // Template having othernotes. That Othernotes is having a sentences that time only executed.                
            }
            catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),'null',null);
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);  //12724
            }   
         }
    }
    
    /*public static void SendingmailwithotherNotes(String othernotes,Id dumpid){        //Commented for 19638
        if(Othernotes != ' '){
            
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Pdf_Parser_Other_Notification__c.getValues('Other Notes').ToAddress__c; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress};
            //  String[] ccAddresses = new String[] {''}; 
            String sfurl = 'https://'+URL.getSalesforceBaseUrl().getHost()+'/';
            system.debug('url is ' +sfurl);
            mail.setToAddresses(toAddresses);
            //     mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSubject('Other Notes to Specify');
            mail.setSaveAsActivity(false);
            mail.setHtmlBody(othernotes.replaceAll('<br>',' ') +'<br/> <br/>To view your record <a href='+ sfurl + dumpid +'> click here.</a>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
        }
    }*/
    
    public static void Revised_Email_Alert(String BodyContvalue,Messaging.InboundEmail email){
        
            system.debug('<<<failedemailsubject>>>'+failedemailsubject);
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
            //  String[] ccAddresses = new String[] {''}; 
            mail.setToAddresses(toAddresses);
            //  mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSaveAsActivity(false);
            mail.setSubject('Dumpster Creation Failed - ' + failedemailsubject);
            mail.setHtmlBody('Hi Warren, <br/><br/>Your Dumpster Creation failed due to <b>Revised Email.</b><br/><br/><b>Regards,<br/>Salesforce Support</b>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
    }
    
    public static void SendingErrormail(String othernotes,String DropOffVisitDate,Date dumpsterDropOffVisitDate){
        if(Othernotes != ' '){
        
            system.debug('<<<failedemailsubject>>>'+failedemailsubject);
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
            //  String[] ccAddresses = new String[] {''}; 
            mail.setToAddresses(toAddresses);
            //  mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSaveAsActivity(false);
            mail.setSubject('Dumpster Update Failed - ' + failedemailsubject);
            mail.setHtmlBody('Hi Warren, <br/><br/>Your Dumpster Update failed due to <b>'+othernotes+'<br/>Drop off Visit Date After :'+dumpsterDropOffVisitDate+'</b><br/><br/><b>Regards,<br/>Salesforce Support</b>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
        }
    }
/*==================================Ticket No: 12623=======================================================
*Method Name     : public static void UpdateDumpsterRecord(String BodyContValue)
*Description     : Parsing PDF and update the Dumpster Record;
*Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Creation or updation
===========================================================================================================*/
      public static void UpdateDumpsterRecord(String BodyContvalue,Messaging.InboundEmail email){
      
        try{
          List<dumpsters__c> dumplist = new List<dumpsters__c>();
          
          system.debug('body is-----------------> '+BodyContvalue);
          bodyContvalue = bodyContvalue.replace('\n','');
          system.debug('body is-----------------> '+BodyContvalue);
          
         /* Integer parsecount = BodyContvalue.indexof('Pick Up Date')+15;
          Integer endcount = parsecount+Integer.valueof(Label.Purchase_Order_Length);*/
          String lowerContValue = BodyContvalue.toLowerCase();
          system.debug('lowerContValue is'+lowerContValue);
          //String result = lowerContValue.substringAfter('day* ').substringbefore(' -');
          String result;
          String[] resarr;
          String specialrequestcomments;
          Date finaldate;
          
          if(lowerContValue.containsignorecase('Please Schedule Final Pick Up'))
          {
              if(lowerContValue.substringAfter('please schedule final pick up').substringBefore('Po #').contains('special request'))
              {
                  result = lowerContValue.substringAfter('please schedule final pick up -').substringBefore('special request').trim();
                  system.debug('result is'+result);
                  resarr = result.split('-');
                  specialrequestcomments = lowerContValue.substringAfter('please schedule final pick up -').substringafter('special request').substringBefore(' - ').trim();
              }
              else
              {
                  result = lowerContValue.substringAfter('- *').substringAfter('*').subStringbefore(' -').trim();
                  system.debug('result is'+result);
                  if(result != null && result != '')
                  {
                      resarr = result.split('/');
                  }
                  else
                  {
                      result = lowerContValue.substringAfter('please schedule final pick up -').subStringbefore(' -').trim();
                      resarr = result.split('-');
                  }
              }
          }
          else
          {
              if(email.subject.contains('Final Removal'))
                  result = email.subject.substringAfter('Removal Date:').trim();                                  
              else            
                  result = lowerContValue.substringAfter('pickup date:').substringBefore('product(s):').trim();
                  
              if(result.contains('/'))
                  resarr = result.split('/');
              else if(result.contains('-'))
                  resarr = result.split('-');
                  
              if(lowerContValue.contains('special instructions'))
                  specialrequestcomments = lowerContValue.substringAfter('special instructions').substringBefore('please confirm that this request in on schedule').trim();
          }
         
          Integer yearno = Integer.valueof(resarr[2]);
          Integer monthno = Integer.valueof(resarr[0]);
          Integer dateno = Integer.valueof(resarr[1]);
          finaldate = Date.newInstance(yearno,monthno,dateno);
          system.debug('value is======>>'+finaldate);
          
         /* Datetime cDT = System.now();
          String currentdate = cDT.format('yyyy-MM-dd');
          system.debug('value'+currentdate); 
          
          Integer parsecount = BodyContvalue.indexof('PO #')+5;
          Integer endcount = parsecount+Integer.valueof(Label.Purchase_Order_Length); 
          system.debug('label value is'+endcount); */
          String Pno;
          if(lowerContValue.containsignorecase('Please Schedule Final Pick Up'))
          {
              Pno = BodyContvalue.substringAfter('PO # ').substringbefore('If');  //12837
              Pno=Pno.remove('*');              //12837
              Pno=Pno.remove(' ');             //12837
              system.debug('po nukmber is >>>1'+Pno); 
          }
          else 
          {
              if(email.subject.contains('Final Removal'))            
                  Pno = email.subject.substringAfter('Dumpster #').substringbefore('on Deal #:').trim();              
              else
                  Pno = BodyContvalue.substringAfter('PO Number:').substringbefore('Please confirm that this request in on schedule').trim();

              if(Pno.tolowercase().contains('special instructions'))
                  Pno = Pno.tolowercase().substringbefore('special instructions').trim();
              
              Pno=Pno.remove('*');
              Pno=Pno.remove(' ');
              Pno=Pno.remove('  ');  
              system.debug('po nukmber is >>>2'+Pno);
              
              /*
              if(BodyContvalue.contains('Service Confirmation:') ) //58228
              {
                  
                  system.debug('Inside PO null');
                 // Pno = BodyContvalue.substringAfter('Service Confirmation:').substringbefore('Please').substringbefore('<br><br>');
                  Pno = BodyContvalue.contains('Special Instructions:')?BodyContvalue.substringAfter('Service Confirmation:').substringbefore('Special Instructions:').substringbefore('<br>'):BodyContvalue.substringAfter('Service Confirmation:').substringbefore('Please').substringbefore('<br><br>');

                  Pno = Pno.remove(' ');
                  
              }
              */    
                  if(BodyContvalue.contains('Service Confirmation:')) //58480
                  {
                      string Pochecker;
                      Pochecker = BodyContvalue.substringAfter('Service Confirmation:').replaceAll( '\\s+', '').left(10);
                      system.debug('>>> Pochecker >>>>'+Pochecker);
                      if(Pochecker.contains('.'))
                      {
                          Pno = Pochecker; 
                          system.debug('>>> Pno 1 >>> '+Pno);
                      }
                      else
                      {
                          Pno = BodyContvalue.substringAfter('Service Confirmation:').replaceAll( '\\s+', '').left(8);
                          system.debug('<<<<<<< Pno 2 >>>>>>>>'+Pno);
                      }
                  }
                  system.debug('Service Confirmation: -po number >>> '+Pno);
              
              
              
          }
          
         
          system.debug('Po <> number '+Pno);
          
          
             if(Pno !='' && Pno !=' ' && Pno !=null){       
          for(Dumpsters__c dump : ([Select id, Confirmed_Pick_Up_Date__c, Comments__c, Trip_Order__c, Status__c, Purchase_Order__c from Dumpsters__c where Purchase_Order__c =: Pno and Status__c='Drop Off Complete'])){        //Ticket 21404
              system.debug('dumpster value is'+dump);
              dump.Status__c = 'Request for Pick-Up';
              dump.Email_Success_helper__c = 'Request for Pick-Up';
              if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
              //dump.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
              dump.Confirmed_Pick_Up_Date__c = Date.valueof(finaldate);
              if(specialrequestcomments != null && specialrequestcomments != '')
                  dump.Comments__c = dump.Comments__c.replace('Pick Up Instructions:', 'Pick Up Instructions:'+specialrequestcomments);
              dumplist.add(dump);           
          }
          }
          Transition__c transition = new Transition__c();
          transition.Html_body__c=bodyContvalue;
          transition.Account__c='UpdateDumpsterRecord';
            transition.Email_subject__c = email.subject;
          insert transition;
          Log__c log=new Log__c();
          log.Transition__c=transition.id;
          log.Po_number__c=Pno;
          log.po_date__c=string.valueof(finaldate);
          insert log;
          if(Dumplist.size() > 0){
              
                  update dumplist;
                  List<Id> DumpstersId = new List<Id>();
                for(Dumpsters__c DumpstersFor : dumplist)
                {
                    DumpstersId.add(DumpstersFor.Id);
                }
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email);
                }
                }
                else
                {
                    SendingMailNoRecordForUpdate(Pno);        //Ticket 21404
                }  
                  
              } catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormailUpdate(e.getDmlMessage(0)); //14169
               
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormailUpdate(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')));  //12724    //14169
            }   
          
      }
      
 public static void SendingErrormailUpdate(String othernotes){
        if(Othernotes != ' '){
        
            system.debug('<<<failedemailsubject>>>'+failedemailsubject);
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
            //  String[] ccAddresses = new String[] {''}; 
            mail.setToAddresses(toAddresses);
            //  mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSaveAsActivity(false);
            mail.setSubject('Dumpster creation Failed - ' + failedemailsubject);
            mail.setHtmlBody('Hi Warren, <br/><br/>Your Dumpster creation failed due to <b>'+othernotes +'</b><br/><br/><b>Regards,<br/>Salesforce Support</b>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
        }
    }      
      
/*==================================Ticket No: 12875=======================================================
*Method Name     : public static void InsertLibertyDumpster(String strResponse,Messaging.InboundEmail email)
*Description     : Parsing PDF and Create the Dumpster Record for liberty Dumpster;
*Arguments       : Uploading the email file and parsing the details for DumpsterRecord Creation
===========================================================================================================*/
 public static void InsertLibertyDumpster(String strResponse,Messaging.InboundEmail email){
  String DropOffVisitDate;
  Date DumpsterDropOfVisitDate;
  
            try{ 
   
                string resReplaceLine = strResponse.replace('\n','<br>');
                
                strResponse = strResponse.replace('&nbsp;',' ');        //Ticket 21598, 21603, 21605
                strResponse = strResponse.replace('&amp;','&');         //Ticket 21598, 21603, 21605
                                
                strResponse = strResponse.replace('\n','<br>');
                strResponse = strResponse.replace('????','fi'); // Ticket No : 12662
                
                String MonthParse = Label.MonthToIntegerPDFParse;
                Map<String,Integer> MonthMap = new Map<string,Integer>();
                Integer i=1;
                for(String StrMonth : MonthParse.split('-')){
                 MonthMap.put(StrMonth,i);
                 i++;
                 
              }

                System.debug('<<<>>>'+strResponse);
                String AccountParse = StrResponse.substringAfter('Original PO:').substringBefore('DELIVERY ADDRESS:');
                if(AccountParse.contains('Liberty Dumpster'))
                   AccountName ='Liberty Dumpster';
                
                DumpsterSizeParser = strResponse.substringAfter('PLACEMENT/PERMIT:').substringbefore('DELIVERY DATE & TIME:');
                system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                
                String Concretecheck = DumpsterSizeParser;
                 
                DumpsterSize = DumpsterSizeParser.substringbefore('<br><br>');
                System.debug('<<<DumpSize>>>'+DumpsterSize);
                DumpsterSize=DumpsterSize.SubString(DumpsterSize.IndexOf('<br>')+4,7);
                System.debug('<<<DumpsterSize>>>'+DumpsterSize);
                
               // string dumpsize = DumpsterSize.substringbefore('yard').replaceAll( '\\s+', '').right(2);//60808
                string dumpsize = DumpsterSize.replaceAll( '\\s+', '').left(2); //60808
               
                system.debug('<<<<dumpsize <<<<'+dumpsize);
                
                if(DumpsterSize=='10' || DumpsterSize=='10 '){
                 DumpsterSize='20';
                }
                
                if(dumpsize =='10' || dumpsize =='10 '){ //61120
                 dumpsize ='20';
                }
                
                if(!dumpsize.isNumeric()) //70113
                {
                  string SizeParser = strResponse.substringAfter('PLACEMENT/PERMIT:').substringAfter('LIVELOAD').substringbefore('DELIVERY DATE & TIME:').substringbefore('-yard');
                  system.debug('SizeParser >>'+SizeParser );
                  
                     dumpsize = SizeParser;
                }
                
                if(dumpsize =='10' || dumpsize =='10 '|| dumpsize ==' 10'){  //70113
                 dumpsize ='20';
                }
                
                ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');  // Ticket No : 12623
                if(mc.EnableTestAccount__c){
                    AccountIdval = mc.TestAccountID__c;
                    system.debug('accid is'+AccountIdval);
                }else{
                    String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                    system.debug('account name list is--->'+AccountQuery);
                    AccountIdval = (Database.query(AccountQuery)).id;
                    system.debug('account name list is--->'+accountIdval);
                } 
                 
                string PurchaseOrder = strResponse.substringAfter('Original PO:').substringbefore(' from').substringAfter('INV-');
                purchaseOrderNumber='INV-'+PurchaseOrder;
                
                string PartsResult;
                String DeliveryAddress;
                if(email.plainTextBody != null)
                {
                    PartsResult = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('<br>');        //Ticket 21464
                    DeliveryAddress = PartsResult;
                    system.debug('DeliveryAddress --->>'+DeliveryAddress);
                }
                else if(email.plainTextBody == null && email.htmlbody != null)        //IF else for Ticket 21464
                {
                    PartsResult = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('<br>');
                    DeliveryAddress = PartsResult;
                    system.debug('DeliveryAddress --->>'+DeliveryAddress);
                }
                
                
                String PhoneNo = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('SIZE, DEBRIS TYPE,').substringAfter(' ').substringbefore('<br><br>');
                
                PhoneNo = PhoneNo.substringAfter('<br>');
                System.debug(PhoneNo);
                
                String regex = '[a-zA-Z()]{1,}';
                String Phone = PhoneNo.replaceAll(regex, '').trim();
                if(Phone.Length()-1 == Phone.lastindexOf('-'))
                {
                    Phone = Phone.removeEnd('-');
                    system.debug(Phone);
                }
                else
                {
                    System.debug(Phone);
                }
                
                //PhoneNo=PhoneNo.SubString(PhoneNo.IndexOf('<br><br>')-13,PhoneNo.IndexOf('<br><br>'));
                //PhoneNo =PhoneNo.SubString(PhoneNo.IndexOf(strResponse.substringAfter('DELIVERY ADDRESS: <br>').substringbefore('SIZE, DEBRIS TYPE,').lastIndexOfIgnoreCase(' '),strResponse.IndexOf('SIZE, DEBRIS TYPE,'))
                System.debug('PhoneNo---------->'+PhoneNo);
                PhoneNo=PhoneNo.SubString(phoneNo.lastIndexOf(' '),phoneNo.length());
                //string Commentparse = strResponse.substringAfter('SIZE, DEBRIS TYPE, PLACEMENT/PERMIT: <br> -,-').substringbefore('<br><br>DELIVERY DATE & TIME:').substringAfter(',  ');
                string Commentparse;
                 Commentparse = strResponse.substringAfter('SIZE, DEBRIS TYPE, PLACEMENT/PERMIT:').substringAfter('<br>').substringbefore('<br><br>DELIVERY DATE & TIME:').substringAfter(',').trim();   

 transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c='liberty dumpster';
                transition.Email_subject__c = email.subject;
  insert transition;
          
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=purchaseOrderNumber;
              
                log.phone_number__c=PhoneNo;
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;  
                log.Comments__c=Label.Update_Comments_Field +'\n' +Commentparse.replaceAll('<br>',''); //70113
                log.Account__c='liberty dumpster';
                               log.Final_pickup_date__c='null';
    
    log.Type__c='New delivery -liberty';
                





                Dumpsters__c dumpster = new Dumpsters__c();
                dumpster.AAccountccount__c              = AccountIdval ;
                dumpster.Status__c                      = 'Unscheduled';
                //dumpster.DifferentDriverSameAddress__c  = TRUE;
                dumpster.Purchase_Order__c              = purchaseOrderNumber;
                //dumpster.Comments__c                    = DeliveryInstruction +'\n' +'\n' +DeliveryInstruction1 ;
                //dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                
                //System.debug('<<<DumpSize333>>>'+DumpsterSize);
                //dumpster.Dumpster_Size__c               = DumpsterSize.replaceAll('-','')+'yd'.trim();
                //System.debug('<<< dumpster.Dumpster_Size__c  >>>'+dumpster.Dumpster_Size__c  );
                
                system.debug('<<<<dumpsize 1<<<<'+dumpsize);
                dumpster.Dumpster_Size__c               = dumpsize+'yd';  //60808
                System.debug('<<< dumpster.Dumpster_Size__c  >>>'+dumpster.Dumpster_Size__c  );
                
                dumpster.Phone_Number_2__c         =   Phone.replaceAll('()','');
                if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                {
                    dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                }
                if(Concretecheck.tolowercase().contains('concrete'))
                {
                    dumpster.Fill_Details__c = 'Concrete Only'; 
                }
                dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
                dumpster.Phone_Number_2__c              = Phone;
                dumpster.Rental__c                      = 'Dumpster Rental';
                dumpster.Email_Success_helper__c        = AccountIdval;
                dumpster.PDF_From_Email__c              = Label.Liberty_Dumpster_Success_Email;            //Ticket 20245
                dumpster.Comments__c                    = Label.Update_Comments_Field +'\n' +Commentparse.replaceAll('<br>','');     //12916 //70113
                //dumpster.X10_Days_Rental_Up_Date__c = system.now();
                
                if(dumpster.Dumpster_Size__c == '40yd'){        //12804 we are using custom label 'Pdf parser Driver Assigner'
                   dumpster.Driver__c = Label.X40ydDriver;  
                }
                else if(dumpster.Dumpster_Size__c == '30yd'){
                   dumpster.Driver__c = Label.X30ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '20yd'){
                   dumpster.Driver__c = Label.X20ydDriver;
                }
               
                if(dumpster.Dumpster_Size__c == '40yd'){
                   dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '30yd'){
                   dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '20yd'){
                   dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                }    
                
                Set<String> HoustonZipcodes = new Set<String>();
                integer Count; String trimmedZip ;
                String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                HoustonZipcodes.addall(Zipcode1);
                HoustonZipcodes.addall(Zipcode2);
                for(String zip : HoustonZipcodes){
                trimmedZip = zip.trim();
                if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                    Count= 1;
                }
                if(Count==1)
                {
                    Dumpster.Houston_Helper__c = True; 
                    Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                    dumpster.Driver__c = label.HoustonDriver;
                    dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                }
                
                string hyfencheck = strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:'); //60039
                
                if(hyfencheck.contains('?')) 
                {
                
                   if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('?').containsIgnoreCase('am')){
                     String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('?');
                     DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                     DropOffVisitTime=DropOffVisitTime.replace('am','').trim();
                     if(DropOffVisitTime.contains(':'))                               
                       DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                     dumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'am';
                     system.debug('dumpster.Drop_Off_Visit_Time__c >>01>>'+dumpster.Drop_Off_Visit_Time__c);
                  }      //60039        
                  
                  if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('?').containsIgnoreCase('pm')){
                    String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('?');
                    DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                    DropOffVisitTime=DropOffVisitTime.replace('pm','');
                    if(DropOffVisitTime.contains(':'))                                        
                       DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                    dumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'pm';
                    system.debug('dumpster.Drop_Off_Visit_Time__c >>02>>'+dumpster.Drop_Off_Visit_Time__c);
                  }    //60039
              
              }
              else
              {    
                    system.debug('else ---><><>');
                    
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-').containsIgnoreCase('am')){
                     String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-');
                     DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                     DropOffVisitTime=DropOffVisitTime.replace('am','').trim();
                     if(DropOffVisitTime.contains(':'))                               //13152
                       DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                     dumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'am';
                     system.debug('dumpster.Drop_Off_Visit_Time__c >>2>>'+dumpster.Drop_Off_Visit_Time__c);
                  }              
                  
                  if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-').containsIgnoreCase('pm')){
                    String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-');
                    DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                    DropOffVisitTime=DropOffVisitTime.replace('pm','');
                    if(DropOffVisitTime.contains(':'))                                         //13152
                       DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                    dumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'pm';
                    system.debug('dumpster.Drop_Off_Visit_Time__c >>2>>'+dumpster.Drop_Off_Visit_Time__c);
                  }
              
              }
              
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('pm to')){
                String DumpsterTime = strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').substringbefore('pm to').substringbefore(':').trim();
                dumpster.Drop_Off_Visit_Time__c=DumpsterTime+'am';
                system.debug('dumpster.Drop_Off_Visit_Time__c >>3>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('AM to')){
                String DumpsterTime = strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').substringbefore('AM to').substringbefore(':').trim();
                dumpster.Drop_Off_Visit_Time__c=DumpsterTime+'am';
                system.debug('dumpster.Drop_Off_Visit_Time__c >>4>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('noon')){
                String DumpsterTime = strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').substringbefore('am to').trim();
                dumpster.Drop_Off_Visit_Time__c=DumpsterTime+'am';
                system.debug('dumpster.Drop_Off_Visit_Time__c >>5>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('7-12pm')){
                dumpster.Drop_Off_Visit_Time__c='9am';  
                system.debug('dumpster.Drop_Off_Visit_Time__c >>6>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('6:00-9:00')){     //15531
                dumpster.Drop_Off_Visit_Time__c='6am';  
                system.debug('dumpster.Drop_Off_Visit_Time__c >>7>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('6-12')){  //13096
                dumpster.Drop_Off_Visit_Time__c='9am'; 
                system.debug('dumpster.Drop_Off_Visit_Time__c >>8>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              
              if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('12-6')){  //13097
                dumpster.Drop_Off_Visit_Time__c='2pm'; 
                system.debug('dumpster.Drop_Off_Visit_Time__c >>9>>'+dumpster.Drop_Off_Visit_Time__c);
              }
              
              String DropVisitDate;        
              DropOffVisitDate=strResponse.substringAfter('DELIVERY DATE').substringbefore('PICKUP DATE');
              for(String MonthFor : MonthMap.keyset()){
                  //System.debug('<<<MonthFor>>>>'+MonthFor);
                  If(DropOffVisitDate.contains(MonthFor)){
                    DropVisitDate=MonthFor+DropOffVisitDate.substringAfter(MonthFor).substringbefore('from');
                    //System.debug('<<<DropVisitDate>>>'+DropVisitDate);
                  }
              }
              
              DropOffVisitDate=DropVisitDate;
              System.debug('<<<DropOffVisitDate>>>'+DropOffVisitDate);
              dumpster.Drop_Off_Visit_Date__c = Date.valueOf(DropOffVisitDate.SubString(DropOffVisitDate.Indexof(', ')+2,DropOffVisitDate.Indexof(', ')+6)+ '-' +MonthMap.get(DropOffVisitDate.substringBefore(' ')) + '-' +DropOffVisitDate.substringAfter(' ').substringBefore(',') );
              System.debug('<<dumpster.Drop_Off_Visit_Date__c>>'+dumpster.Drop_Off_Visit_Date__c);
              DumpsterDropOfVisitDate= Dumpster.Drop_Off_Visit_Date__c;
              
              String ConfirmedPickUpDate;        
              String ConfirmPickUpDate;
              ConfirmPickUpDate=strResponse.substringAfter('PICKUP DATE').substringbefore('<br><br>We');
              for(String MonthFor : MonthMap.keyset()){
                  //System.debug('<<<MonthFor>>>>'+MonthFor);
                  If(ConfirmPickUpDate.contains(MonthFor)){
                    ConfirmPickUpDate=MonthFor+ConfirmPickUpDate.substringAfter(MonthFor);
                    //System.debug('<<<DropVisitDate>>>'+DropVisitDate);
                  }
              }
              
              ConfirmedPickUpDate=ConfirmPickUpDate;
              System.debug('<<<ConfirmedPickUpDate>>>'+ConfirmedPickUpDate);
              dumpster.Confirmed_Pick_Up_Date__c = Date.valueOf(ConfirmedPickUpDate.SubString(ConfirmedPickUpDate.Indexof(', ')+2,ConfirmedPickUpDate.Indexof(', ')+6)+ '-' +MonthMap.get(ConfirmedPickUpDate.substringBefore(' ')) + '-' +ConfirmedPickUpDate.substringAfter(' ').substringBefore(',') );
              System.debug('<<dumpster.Confirmed_Pick_Up_Date__c >>'+dumpster.Confirmed_Pick_Up_Date__c );
              
             log.po_date__c= string.valueOf(DumpsterDropOfVisitDate);
             insert log; 
             //String ConfirmedPickUpDate=strResponse.substringAfter('PICKUP DATE:').substringbefore('<br><br>We').substringAfter('<br>').substringAfter(', ');
              //System.debug('<<<ConfirmedPickUpDate>>>'+ConfirmedPickUpDate);
              
              //dumpster.Confirmed_Pick_Up_Date__c = Date.valueOf(ConfirmedPickUpDate.substringAfter(', ').substringBefore(' ') + '-' +MonthMap.get(ConfirmedPickUpDate.substringBefore(' ')) + '-' +ConfirmedPickUpDate.substringAfter(' ').substringBefore(',') );
              
              insert dumpster;
              
   System.debug('<<<dumpster>>>'+dumpster);
               system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
             //Process of Email attachment creation
                Attachment EmlAttachment   = new Attachment();                           //12916
                EmlAttachment.Name         = email.Subject + '.eml';
                if(email.htmlBody != null)
                {
                    EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                }
                else
                {
                    EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                }
                EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                EmlAttachment.ParentId     = dumpster.Id;
                EmlAttachment.IsPrivate    = false;
                AttachmentList.add(EmlAttachment);
                
                
                //Process of Attachment creations
                if(AttachmentList.size()>0){
                system.debug('attachment list size '+attachmentlist.size());
                    insert AttachmentList;
                }
                
                List<Id> DumpstersId = new List<Id>();
                if(dumpster.Id != null)
                    DumpstersId.add(dumpster.Id);
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email);
                }
   
            }
            catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),DropOffVisitDate,DumpsterDropOfVisitDate); //14169
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),DropOffVisitDate,DumpsterDropOfVisitDate);  //12724    //14169
            }   
   }    
      
    
      
    
      
    
      
    
      
    
      
 /*==================================Ticket No: 15054=======================================================
*Method Name     : public static void InsertAffordableDumpster(String strResponse,Messaging.InboundEmail email)
*Description     : Parsing PDF and Create the Dumpster Record for AffordableDumpster;
*Arguments       : Uploading the email file and parsing the details for DumpsterRecord Creation
===========================================================================================================*/     
 public static void InsertAffordableDumpster(String strResponse,Messaging.InboundEmail email){
  
  
            try{ 
                
                List<Dumpsters__c> dumplist = new List<Dumpsters__c>(); 
                Dumpsters__c dumpster = new Dumpsters__c();
                
                string resReplaceLine = strResponse.replace('\n','<br>');
                Boolean CheckRecord=false;
                strResponse = strResponse.replace('\n','<br>');
                strResponse = strResponse.replace('????','fi'); // Ticket No : 12662
                System.debug('<<<>>>'+strResponse);
                
                if(strResponse.tolowercase().contains('final - po#'))
                {
                    string PurchaseOrder;
                    List<Dumpsters__c> Dumpsterlist = new List<Dumpsters__c>();
                    
                    if(email.plainTextBody != null)
                    {
                        PurchaseOrder = strResponse.substringAfter('ORDER INFORMATION - PO# ').substringbefore(' <br><br><br>Order Details');
                        purchaseOrderNumber=PurchaseOrder;
                    }
                    else if(email.plainTextBody == null && email.htmlbody != null)
                    {
                        purchaseOrderNumber = email.htmlbody.substringAfter('ORDER INFORMATION - PO# ').substringbefore('Order Details').stripHtmlTags();
                    }
                    system.debug(purchaseOrderNumber);
                    transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c= 'Affordable dumpster';
                    transition.Email_subject__c = email.subject;
              insert transition;
              
  
     
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=purchaseOrderNumber;
              
    log.Account__c='Addorable dumpster';
   
   
    log.Type__c='New delivery -Affordable';
                insert log;
                    for(Dumpsters__c DumpsterFor : [Select id, Status__c, Trip_Order__c, Confirmed_Pick_Up_Date__c, Purchase_Order__c from Dumpsters__c where Purchase_Order__c =: purchaseOrderNumber and Status__c = 'Drop Off Complete'])
                    {
                        CheckRecord = true;
                        Dumpsterlist.add(DumpsterFor);
                    }
                    
                    if(Dumpsterlist.size()<2)
                    {
                        for(Dumpsters__c dump : Dumpsterlist)
                        {
                            dump.Status__c = 'Request for Pick-Up';
                            Datetime todaysDate = Datetime.now();
                            system.debug(todaysDate.format('EEEE'));
                            dump.Confirmed_Pick_Up_Date__c = todaysDate.format('EEEE') == 'Saturday' ? system.today() + 2 : system.today() + 1;
                            dump.Email_Success_helper__c        = 'Request for Pick-Up';
                            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                              {
                                  dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                              }
                            dump.PDF_From_Email__c              = Label.Affordable_Dumpsters_Success_Email;
                        }
                        
                        if(Dumpsterlist.size() > 0)
                        {
                            update Dumpsterlist;
                            Attachment EmlAttachment   = new Attachment();
                            EmlAttachment.Name         = email.Subject + '.eml';
                            if(email.htmlBody != null)
                            {
                                EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                            }
                            else
                            {
                                EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                            }
                            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                            EmlAttachment.ParentId     = Dumpsterlist[0].Id;
                            EmlAttachment.IsPrivate    = false;
                            AttachmentList.add(EmlAttachment);
                            
                            if(AttachmentList.size()>0)
                            {
                                system.debug('attachment list size '+attachmentlist.size());
                                insert AttachmentList;
                            }
                        }
                        List<Id> DumpstersId = new List<Id>();
                        for(Dumpsters__c dumpsterfor : Dumpsterlist)
                        {
                            DumpstersId.add(dumpsterfor.Id);
                        }
                        if(DumpstersId.size() > 0)
                        {
                            send_Reply(DumpstersId, email); 
                        }
                    }
                    else
                    {
                        SendingEmailMultipleDumpsterFound(Dumpsterlist);
                    }
                    if(!CheckRecord)
                    {
                        SendingMailNoRecordForUpdate(PurchaseOrderNumber);
                    }
                }
                else
                {
                String AccountParse = StrResponse.substringBefore('Order Details');
                if(AccountParse.contains('Affordable Dumpster'))
                   AccountName ='Affordable Dumpsters';
                
                
                ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');  // Ticket No : 12623
                if(mc.EnableTestAccount__c){
                    AccountIdval = mc.TestAccountID__c;
                    system.debug('accid is'+AccountIdval);
                }else{
                    String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                    system.debug('account name list is--->'+AccountQuery);
                    AccountIdval = (Database.query(AccountQuery)).id;
                    system.debug('account name list is--->'+accountIdval);
                }  
                
                string PurchaseOrder;
                string PartsResult;
                String DeliveryAddress;
                String PhoneNo;
                string Commentparse;
                string ContactResult;
                String DropOfVisitDate;
                String ConcreteOnly;
                
                if(email.plainTextBody != null)
                {
                
                    DumpsterSizeParser = strResponse.substringAfter('Size<br><br>').substringbefore('<br>Debris');
                    system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                    DumpsterSize=DumpsterSizeParser.substringBefore(' ');
                    System.debug('<<<DumpsterSize>>>'+DumpsterSize);
                    
                    PurchaseOrder = strResponse.substringAfter('ORDER INFORMATION - PO# ').substringbefore(' <br><br><br>Order Details');
                    purchaseOrderNumber=PurchaseOrder;
                    
                    PartsResult = strResponse.substringAfter('Point of Contact<br><br>').substringbefore('<br><br><br><br>Phone<br>');
                    PartsResult=PartsResult.substringAfter('<br><br>').substringbefore('<br><http:') +', '+ PartsResult.substringAfter('<br><http:').substringAfter('> <br>');
                    DeliveryAddress = PartsResult;
                    system.debug('DeliveryAddress --->>'+DeliveryAddress);      
                    
                    PhoneNo = strResponse.substringAfter('Phone<br><br>').substringbefore('<tel:');
                    //PhoneNo=PhoneNo.SubString(PhoneNo.IndexOf('<br><br>')-13,PhoneNo.IndexOf('<br><br>'));
                    Commentparse = strResponse.substringAfter('Specific Placement<br><br><br>').substringbefore('<br><br> <br><br>').replaceAll('<br>',' ');
                    
                    ContactResult = strResponse.substringAfter('Point of Contact<br><br>').substringbefore('<br><br>');
                    
                    ConcreteOnly = strResponse.tolowercase().substringAfter('debris').substringbefore('specific placement');
                    
                    system.debug(ConcreteOnly);
                    
                    DropOfVisitDate=strResponse.substringAfter('Desired Delivery Date<br><br>').substringbefore(' ');
                    DumpsterDropOffvisitDate=DropOfVisitDate.split('/');
                    System.debug('<<<DumpsterDropOffvisitDate>>>'+DumpsterDropOffvisitDate);
                }
                else if(email.plainTextBody == null && email.htmlbody != null)
                {
                    
                    DumpsterSizeParser = strResponse.substringAfter('Size ').substringbefore('Debris');
                    system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                    DumpsterSize=DumpsterSizeParser.substringBefore(' ');
                    System.debug('<<<DumpsterSize>>>'+DumpsterSize);
                    
                    system.debug(email.htmlbody.substringAfter('ORDER INFORMATION - PO# ').substringbefore('Order Details').stripHtmlTags());
                    purchaseOrderNumber = email.htmlbody.substringAfter('ORDER INFORMATION - PO# ').substringbefore('Order Details').stripHtmlTags();
                    
                    system.debug(email.htmlbody.substringAfter('Point of Contact').substringbefore('<a href=').stripHtmlTags());
                    ContactResult = email.htmlbody.substringAfter('Point of Contact').substringbefore('<a href=').stripHtmlTags();
                    
                    system.debug(email.htmlbody.substringAfter('Point of Contact').substringafter('<a href=').substringafter('>').substringbefore('Phone').stripHtmlTags().replace('\n',', '));
                    DeliveryAddress = email.htmlbody.substringAfter('Point of Contact').substringafter('<a href=').substringafter('>').substringbefore('Phone').stripHtmlTags().replace('\n',', ');
                    
                    system.debug(email.htmlbody.substringAfter('Phone').substringbefore('Desired Delivery Date').stripHtmlTags());
                    PhoneNo = email.htmlbody.substringAfter('Phone').substringbefore('Desired Delivery Date').stripHtmlTags();
                    
                    system.debug(email.htmlbody.substringAfter('Specific Placement').stripHtmlTags());
                    Commentparse = email.htmlbody.substringAfter('Specific Placement').stripHtmlTags();
                    
                    system.debug(email.htmlbody.substringAfter('Desired Delivery Date').substringbefore('Size').stripHtmlTags());
                    
                    ConcreteOnly = strResponse.tolowercase().substringAfter('debris').substringbefore('specific placement');
                    
                    system.debug(ConcreteOnly);
                    
                    DropOfVisitDate = email.htmlbody.substringAfter('Desired Delivery Date').substringbefore('Size').stripHtmlTags();
                    DumpsterDropOffvisitDate=DropOfVisitDate.split('/');
                }
                
                /*
                string PurchaseOrder = strResponse.substringAfter('ORDER INFORMATION - PO# ').substringbefore(' <br><br><br>Order Details');
                purchaseOrderNumber=PurchaseOrder;
                
                string PartsResult = strResponse.substringAfter('Point of Contact<br><br>').substringbefore('<br><br><br><br>Phone<br>');
                PartsResult=PartsResult.substringAfter('<br><br>').substringbefore('<br><http:') +', '+ PartsResult.substringAfter('<br><http:').substringAfter('> <br>');
                String DeliveryAddress = PartsResult;
                system.debug('DeliveryAddress --->>'+DeliveryAddress);      
                
                String PhoneNo = strResponse.substringAfter('Phone<br><br>').substringbefore('<tel:');
                //PhoneNo=PhoneNo.SubString(PhoneNo.IndexOf('<br><br>')-13,PhoneNo.IndexOf('<br><br>'));
                string Commentparse = strResponse.substringAfter('Specific Placement<br><br><br>').substringbefore('<br><br> <br><br>').replaceAll('<br>',' ');
                
                string ContactResult = strResponse.substringAfter('Point of Contact<br><br>').substringbefore('<br><br>');
               
                String DropOfVisitDate=strResponse.substringAfter('Desired Delivery Date<br><br>').substringbefore(' ');
                DumpsterDropOffvisitDate=DropOfVisitDate.split('/');
                System.debug('<<<DumpsterDropOffvisitDate>>>'+DumpsterDropOffvisitDate);
                */
                
                if(strResponse.tolowercase().contains('swap out - po#')||strResponse.tolowercase().contains('swap out - (po#)ADR')) // Ticket No :56280
                {   
                    system.debug(' << Swap out DeliveryAddress 1>> ' +DeliveryAddress );
                    system.debug(' << Swap out AccountIdval 1 >> ' +AccountIdval);
                     system.debug(' << Swap out DumpsterSize> 1 1> ' +DumpsterSize);
                    system.debug(' << inside Swap out Affordable >> ');
                    for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Pdf_Parser_Delivery_Address__c=:DeliveryAddress and Status__c='Drop Off Complete' and  Dumpster_Size__c =: DumpsterSize+'yd' and AAccountccount__c =:AccountIdval]))
                    {   
                        CheckRecord=True;
                        system.debug('CheckRecord><><>'+CheckRecord);
                        dumplist.add(dump);
                        system.debug('Swap-dumplist-update-->>'+dumplist);
                        system.debug(' << Swap out dump.id>> ' +dump.id);
                        system.debug(' << Swap out DeliveryAddress >> ' +DeliveryAddress );
                        system.debug(' << Swap out Pdf_Parser_Delivery_Address__c>> ' +dump.Pdf_Parser_Delivery_Address__c);
                        system.debug(' << Swap out list>> ' +dumplist);
                    }
                    
                    If(dumplist.size()<2)
                    {    
                     system.debug(' << Swap out update start>> ' +dumplist);
                        for(Dumpsters__c dump : dumplist)
                        {
                            system.debug('dumpster value is'+dump);
                            dumpster=dump.clone(false,false);
                            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                              {
                                  dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                              }
                            dumpster.Driver__c = dump.Pick_Up_Driver__c; // Ticket 20893
                            dump.Status__c = 'Request for Pick-Up';
                            dump.Email_Success_helper__c = 'Request for Pick-Up';
                            //dump.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                            dump.Confirmed_Pick_Up_Date__c = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);   
                        }
                        if(Dumplist.size() > 0)
                        {
                            system.debug(' << Swap out Affordable updated >> ');
                            update dumplist;
                             system.debug(' << Swap out Affordable dumplist >> '+dumplist);
                            
                        }
                        System.debug(dumpster);
                        if(dumpster.AAccountccount__c!=null)
                        {
                            dumpster.Purchase_Order__c              =purchaseOrderNumber;
                            dumpster.Status__c                      ='Unscheduled';
                            //dumpster.DifferentDriverSameAddress__c  = TRUE;
                            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                              {
                                  dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                              }
                            dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                            dumpster.Email_Success_helper__c        = 'Clone Dumpster';
                            dumpster.Dumpster_Size__c               = DumpsterSize+'yd';
                            dumpster.Is_Cloning__c=true;
                            //CloneDumpster.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                            System.debug('<<<email.PlainTextBody>>>'+email.PlainTextBody);
                            insert dumpster; 
                        }
                    }
                    else
                    {
                        SendingEmailMultipleDumpsterFound(Dumplist);
                    }
                    if(!CheckRecord){
                     SendingMailNoRecord(DumpsterSize,DeliveryAddress,PurchaseOrderNumber);
                    }
                }
                else
                {
                    
                    dumpster.AAccountccount__c              = AccountIdval ;
                    dumpster.Status__c                      = 'Unscheduled';
                    dumpster.Purchase_Order__c              = purchaseOrderNumber;
                    //dumpster.DifferentDriverSameAddress__c  = TRUE;
                    //dumpster.Comments__c                    = DeliveryInstruction +'\n' +'\n' +DeliveryInstruction1 ;
                    dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                    dumpster.Dumpster_Size__c               = DumpsterSize+'yd';
                    dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
                    dumpster.Phone_Number_2__c              = PhoneNo;
                    if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                      {
                          dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                      }
                    dumpster.Email_Success_helper__c        = AccountIdval;
                    dumpster.PDF_From_Email__c              = Label.Affordable_Dumpsters_Success_Email;            //Ticket 20245
                    dumpster.Rental__c                      = 'Dumpster Rental';
                    dumpster.Comments__c                    = Label.Update_Comments_Field +'\n' +Commentparse +'\n' +'\n' +ContactResult ;     //12916
                    //dumpster.X10_Days_Rental_Up_Date__c = system.now();
                    
                    if(ConcreteOnly.contains('concrete'))
                    {
                       dumpster.Fill_Details__c = 'Concrete Only'; 
                    }
                    
                    if(dumpster.Dumpster_Size__c == '40yd'){        //12804 we are using custom label 'Pdf parser Driver Assigner'
                       dumpster.Driver__c = Label.X40ydDriver;  
                    }
                    else if(dumpster.Dumpster_Size__c == '30yd'){
                       dumpster.Driver__c = Label.X30ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '20yd'){
                       dumpster.Driver__c = Label.X20ydDriver;
                    }
                   
                    if(dumpster.Dumpster_Size__c == '40yd'){
                       dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '30yd'){
                       dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                    }
                    else if(dumpster.Dumpster_Size__c == '20yd'){
                       dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                    }    
                    
                    Set<String> HoustonZipcodes = new Set<String>();
                    integer Count; String trimmedZip ;
                    String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                    String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                    HoustonZipcodes.addall(Zipcode1);
                    HoustonZipcodes.addall(Zipcode2);
                    for(String zip : HoustonZipcodes){
                    trimmedZip = zip.trim();
                    if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                        Count= 1;
                    }
                    if(Count==1)
                    {
                        Dumpster.Houston_Helper__c = True; 
                        Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                        dumpster.Driver__c = label.HoustonDriver;
                        dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                    }
                    
                     
                  insert dumpster;
              }
              if(dumpster.Id!=null)
              {
               System.debug('<<<dumpster>>>'+dumpster);
               system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
             //Process of Email attachment creation
                Attachment EmlAttachment   = new Attachment();                           //12916
                EmlAttachment.Name         = email.Subject + '.eml';
                if(email.htmlBody != null)
                {
                    EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                }
                else
                {
                    EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                }
                EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                EmlAttachment.ParentId     = dumpster.Id;
                EmlAttachment.IsPrivate    = false;
                AttachmentList.add(EmlAttachment);
                
                
                //Process of Attachment creations
                if(AttachmentList.size()>0){
                system.debug('attachment list size '+attachmentlist.size());
                    insert AttachmentList;
                }
                }
                
                List<Id> DumpstersId = new List<Id>();
                if(dumpster.Id != null)
                    DumpstersId.add(dumpster.Id);
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email); 
                }
                }
                
                
                
            }
           catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),'null',null);
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);  //12724
            }   
   }  
   
    /*==================================Ticket No: 19261=======================================================
    *Method Name     : public static void CloneDumpsterRecord(String BodyContValue)
    *Description     : Parsing PDF and update the Dumpster Record And clone;
    *Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Clone or updation
    ===========================================================================================================*/   
    Public Static Void CloneDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email)
    {
        Integer PartsCount;
        Integer endCount;
        string PartsResult;
        Boolean CheckRecord=false;
        
        if(strResponse != null) 
        {
            try
            {
                List<Dumpsters__c> dumplist = new List<Dumpsters__c>(); 
                Dumpsters__c CloneDumpster = new Dumpsters__c();
                
                string resReplaceLine = strResponse.replace('\n','<br>');
                System.debug('<<<email>>>'+email);
                strResponse = strResponse.replace('\n','<br>');
                //strResponse = strResponse.replace('\t','<tbs>');
                System.debug('<<<strResponse>>>'+strResponse);
                system.debug('Po Number '+purchaseOrderNumber);Response = strResponse.replace('??','fi');
                String POHelper;
                //Process for Number of PO Numberfinding   
                if(strResponse.Contains('Po Date') || strResponse.Contains('Confirmation<br>Date')) //ticket no 57200 and 57273
                
                { 
                    
                    PartsCount  = strResponse.IndexOf('Confirmation<br>Date') > 0?strResponse.IndexOf('Confirmation<br>Date'):strResponse.IndexOf('Po Date'); //ticket no:57200 and 57273
                    
                    endCount = strResponse.IndexOf('<br>Delivery');
                    PartsResult = strResponse.SubString(PartsCount+30,endCount-1);
                    PartsResult = PartsResult.Replace('<br>',''); 
                    purchaseOrderNumber = PartsResult;
                     system.debug('PartsResult Number is'+PartsResult);
                    if(purchaseOrderNumber.contains('\t'))
                    {
                        purchaseOrderNumber = purchaseOrderNumber.SubStringAfter('\t');
                        system.debug('Po Number is'+purchaseOrderNumber);
                    }
                    system.debug('Po Number in outside'+purchaseOrderNumber);
                    
                    POHelper=strResponse.tolowercase(); 
                    
                    POHelper = POHelper.contains('confirmation #')?POHelper.substringAfter('confirmation #').substringBefore('<br>delivery'):POHelper.substringAfter('po #').substringBefore('<br>delivery'); //ticket no :57200 and 57273
                    system.debug('Po Number is ---'+strResponse.tolowercase().substringAfter('Confirmation #').substringBefore('<br>Delivery'));
                    POHelper = POHelper.replace('<br>', '');
                    POHelper = POHelper.replaceAll('\\t', '');
                    POHelper = POHelper.SubstringAfter('/').SubstringAfter('/');
                    
                    system.debug('POHelper.SubstringAfter(/).SubstringAfter(/) ---'+POHelper.SubstringAfter('/').SubstringAfter('/'));
                    POHelper = POHelper.SubString(4, POHelper.length());
                    system.debug(POHelper+' --- ' +POHelper.length());
                    purchaseOrderNumber = POHelper;
                    system.debug('Po Number is ---'+purchaseOrderNumber);
                    
                }
               
                else
                {
                    string PurchaseNoString = StrResponse.SubstringAfter('<br>DUMPSTER ORDER').SubstringBefore('<br>Delivery Address  Rep Delivery Date   <br>');
                    system.debug('PurchaseNoString '+PurchaseNoString);
                    
                    purchaseOrderNumber = PurchaseNoString.SubstringAfter('PO Date').substringAfter('<br>').subStringBefore('<br>Delivery Address').substringAfter('\t').substringAfter('\t').substringAfter('\t').substringAfter('\t').trim();
                    system.debug('purchaseOrderNumber '+purchaseOrderNumber);
                }
                
                // Delivery Address
                
                PartsCount  = strResponse.IndexOf('Delivery Date');
                if(strResponse.contains('TX '))
                {
                    endCount = strResponse.IndexOf('TX ');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX ')+8);                
                }
                else if(strResponse.contains('TX<br>'))
                {
                    endCount = strResponse.IndexOf('TX<br>');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX<br>')+12);
                    PartsResult = PartsResult.Replace('TX<br>','TX ');
                }
                
                if(strResponse.contains('TX <br>'))
                {
                    endCount = strResponse.IndexOf('TX <br>');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX <br>')+12);
                    PartsResult = PartsResult.Replace('TX <br>','TX ');
                }
                if(strResponse.contains('TX ,'))
                {
                    system.debug('inside the TX ,');
                    endCount = strResponse.IndexOf('TX ,');                                                                        
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+15);    
                    PartsResult = PartsResult.Replace('\t<br>','');
                }
                
                if(strResponse.contains('Texas ,'))
                {
                    system.debug('inside the Texas ,');
                    EndCount = strResponse.IndexOf('Texas ,');                                                                       
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+18);   
                    PartsResult = PartsResult.ReplaceAll('/t',''); 
                    PartsResult = PartsResult.Replace('<br>','');
                }
                
                system.debug(PartsResult);
                PartsResult = PartsResult.Replace('<br>',' , ');
                String DeliveryAddress = PartsResult;
                DeliveryAddress = DeliveryAddress.replaceAll('\\t+', ' ');
                DeliveryAddress = DeliveryAddress.replaceAll(',  ', ', ');
                
                String DeliveryAddresscheck;
                DeliveryAddresscheck = DeliveryAddress.replaceAll(',', '');
                DeliveryAddresscheck = DeliveryAddresscheck.replaceAll(' ', '');
                system.debug('DeliveryAddress --->>'+DeliveryAddress);
                system.debug('DeliveryAddresscheck --->>'+DeliveryAddresscheck);
                
                //Process of Dumpster Size 
                DumpsterSizeParser = strResponse.SubString(strResponse.IndexOf('<br>Qty'),strResponse.IndexOf('</pre>'))+'</pre>';
                system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                
                String DumpsterSize;
                if(DumpsterSizeParser.contains('- -'))
                {
                    DumpsterSize= DumpsterSizeParser.SubStringAfter('- - ').substringBefore(' yard')+'yd';
                }
                
                if(DumpsterSizeParser.contains('- HEAVY -'))
                {
                    DumpsterSize= DumpsterSizeParser.SubStringAfter('- HEAVY - ').substringBefore(' yard')+'yd';
                }
                
                //Delivery Date
                String StrDate=strResponse.SubstringBefore('Order Type').SubStringAfter('Delivery Date');
                System.debug('StrDate1'+StrDate);
                System.debug('Contains:'+StrDate.Contains('<br> <br>'));
                if(StrDate.Contains('<br> <br>')){
                StrDate=StrDate.replace('<br> <br>','<br>');
                Integer StrLen=strDate.length();
                PartsResult = StrDate.SubString(StrLen-18,StrLen-6);
                System.debug('PartsResult:'+PartsResult);
                
                }
                else
                {
                    PartsCount  = strResponse.IndexOf('<br>Order Type');
                    System.debug('PartsCount:'+PartsCount);
                    PartsResult = strResponse.SubString(PartsCount-11,PartsCount);        //Ticket 21046
                    System.debug('PartsResult:'+PartsResult);
                }
                DumpsterDropOffvisitDate=PartsResult.split('/');
                System.debug('DropOffDate'+DumpsterDropOffvisitDate);
                System.debug('DeliveryAddress'+DeliveryAddress);
                System.debug('DumpsterSize'+DumpsterSize);
                
                System.debug([Select id, Name,Driver__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Comments_Helper__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Delivery_Address_PDF_Helper__c=:DeliveryAddresscheck and Status__c='Drop Off Complete' and  Dumpster_Size__c=:DumpsterSize]);
                // Update Current record 
                 transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c= 'Empty and return';
                transition.Email_subject__c = email.subject;
              insert transition;
              
  
     
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=purchaseOrderNumber;
              
    log.Account__c='Addorable dumpsteEmpty and return';
   log.Delivery_adddtess__c=DeliveryAddress;
   
    log.Type__c='Empty and return';
                insert log; 
                for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Comments_Helper__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Delivery_Address_PDF_Helper__c=:DeliveryAddresscheck and Status__c='Drop Off Complete' and  Dumpster_Size__c=:DumpsterSize]))
                {   
                    CheckRecord=True;
                    dumplist.add(dump);
                }   
                If(dumplist.size()<2)
                {
                    for(Dumpsters__c dump : dumplist)
                    {
                        system.debug('dumpster value is'+dump);
                        CloneDumpster=dump.clone(false,false);
                        CloneDumpster.Driver__c = dump.Pick_Up_Driver__c; // Ticket 20893
                        CloneDumpster.Comments__c = dump.Comments_Helper__c;
                        dump.Status__c = 'Request for Pick-Up';
                        dump.Email_Success_helper__c = 'Request for Pick-Up';
                        if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                          {
                              dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                          }
                        //dump.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                        dump.Confirmed_Pick_Up_Date__c = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);   
                    }
                    if(Dumplist.size() > 0)
                    {
                        update dumplist;
                        
                    }
                    System.debug(CloneDumpster);
                    if(CloneDumpster.AAccountccount__c!=null)
                    {
                        CloneDumpster.Purchase_Order__c              =purchaseOrderNumber;
                        CloneDumpster.Status__c                      ='Unscheduled';
                        //Clonedumpster.DifferentDriverSameAddress__c  = TRUE;
                        CloneDumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                        CloneDumpster.Email_Success_helper__c        = 'Clone Dumpster';
                        CloneDumpster.Is_Cloning__c=true;
                        if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                          {
                              CloneDumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                          }
                        //CloneDumpster.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                        System.debug('<<<email.PlainTextBody>>>'+email.PlainTextBody);
                        insert CloneDumpster; 
                        //Process of Email attachment creation
                        Attachment EmlAttachment   = new Attachment();
                        EmlAttachment.Name         = email.Subject + '.eml';
                        if(email.htmlBody != null)
                        {
                            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                        }
                        else
                        {
                            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                        }
                        EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                        EmlAttachment.ParentId     = CloneDumpster.Id;
                        EmlAttachment.IsPrivate    = false;
                        AttachmentList.add(EmlAttachment);
                        
                        
                        //Process of Attachment creations
                        if(AttachmentList.size()>0)
                        {
                            system.debug('attachment list size '+attachmentlist.size());
                            insert AttachmentList;
                        }           
                    }
                    List<Id> DumpstersId = new List<Id>();
                    for(Dumpsters__c DumpstersFor : Dumplist)
                    {
                        DumpstersId.add(DumpstersFor.Id);
                    }
                    if(CloneDumpster.id != null)
                        DumpstersId.add(CloneDumpster.Id);
                    system.debug(DumpstersId);
                    if(DumpstersId.size() > 0)
                    {
                        send_Reply(DumpstersId, email); 
                    }
                }
                else
                {
                    SendingEmailMultipleDumpsterFound(Dumplist);
                }
                if(!CheckRecord){
                 SendingMailNoRecord(DumpsterSize,DeliveryAddress,PurchaseOrderNumber);
                }
            }
            catch(DMLException e)
            { //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),'null',null);            
            }
            catch(Exception e)
            { //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);
            }   
            
        } 
    }
    
    /*==================================Ticket No: 19261=======================================================
    *Method Name     : public static void SendingEmailMultipleDumpsterFound(List<Dumpsters__c> dumpsterlist)
    *Description     : Sent Email if we found 2 or more records with same address, same dumpster size and same status.
    *Arguments       : List of dumpsters with same address, same dumpster size and same status.
    ===========================================================================================================*/ 
    
    public static void SendingEmailMultipleDumpsterFound(List<Dumpsters__c> dumpsterlist)
    {
        List<String> DumpsterString = new List<String>();
        
        if(dumpsterlist.size()>1)
        {
            String sfurl = 'https://'+URL.getSalesforceBaseUrl().getHost()+'/';
            for(Dumpsters__c DumpsterFor : dumpsterlist)
            {
                DumpsterString.add('<a href='+ sfurl + DumpsterFor.Id +'>'+DumpsterFor.Name+'</a>');
            }
            
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null)
            {
                try
                {
                    String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
                    //  String[] ccAddresses = new String[] {''}; 
                    mail.setToAddresses(toAddresses);
                    //  mail.setCcAddresses(ccAddresses);
                    mail.setSenderDisplayName('Salesforce Support');
                    mail.setSubject(failedemailsubject + ' - Multiple dumpsters found.');
                    mail.setSaveAsActivity(false);
                    mail.setHtmlBody('Hi Warren, <br/><br/>We have found '+String.join(DumpsterString,', ')+' records with same Address, same Dumpster Size.<br/><br/>So we can\'t able to update and clone the correct dumpster records.<br/><br/><b>Regards,<br/>Salesforce Support</b>');
                    Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
                }
                catch(exception e)
                {
                    System.debug('Exception raised due to ->'+e);
                }
            }
        } 
    }
    
    /*==================================Ticket No: 19261=======================================================
    *Method Name     : public static void SendingMailNoRecord(String DumpsterSize,String DumpsterAddress,String PONumber)
    *Description     : Sent Email if we not found dumpster records with same address, same dumpster size and same status.
    *Arguments       : List of dumpsters with same address, same dumpster size 
    ===========================================================================================================*/ 
    
    public static void SendingMailNoRecord(String DumpsterSize,String DumpsterAddress,String PONumber){
        if(DumpsterSize!= ' '){
        
                       
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
            //  String[] ccAddresses = new String[] {''}; 
            mail.setToAddresses(toAddresses);
            //  mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSubject(failedemailsubject + ' - PO- '+ PONumber+' Dumpster Not Found');
            mail.setSaveAsActivity(false);
            mail.setHtmlBody('Hi Warren, <br/><br/><b>Your Dumpster creation failed due to: </b>Unable to find the Dumpster record based on below Criteria.<br/><br/><b>Criteria:</b><br/>1. Status = Drop Off Complete.<br/>2. Dumpster Size ='+DumpsterSize+'<br/>3. Address:'+DumpsterAddress+'  <br/><br/><b>Regards,<br/>Salesforce Support</b>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
        }
    }
    
    /*==================================Ticket No: 21404=======================================================
    *Method Name     : public static void SendingMailNoRecord(String DumpsterSize,String DumpsterAddress,String PONumber)
    *Description     : Sent Email if we not found dumpster records with same address, same dumpster size and same status.
    *Arguments       : List of dumpsters with same address, same dumpster size 
    ===========================================================================================================*/ 
    
    public static void SendingMailNoRecordForUpdate(String PONumber){
        if(PONumber!= ' '){
        
                       
            Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
            String EmailToAddress = Label.Warren_Email; 
            System.debug(EmailToAddress);
            if(EmailToAddress!=null){
            try{
            String[] toAddresses = new String[] {EmailToAddress,Label.Merfantz_Support_Mail};
            //  String[] ccAddresses = new String[] {''}; 
            mail.setToAddresses(toAddresses);
            //  mail.setCcAddresses(ccAddresses);
            mail.setSenderDisplayName('Salesforce Support');
            mail.setSubject(failedemailsubject + ' - PO- '+ PONumber+' Dumpster Not Found');
            mail.setSaveAsActivity(false);
            mail.setHtmlBody('Hi Warren, <br/><br/><b>Your Dumpster update failed due to: </b>Unable to find the Dumpster record based on below Criteria.<br/><br/><b>Criteria:</b><br/>1. Status = Drop Off Complete.  <br/><br/><b>Regards,<br/>Salesforce Support</b>');
            Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
            }
            catch(exception e){
                System.debug('Exception raised due to ->'+e);
            }
            }
        }
    }
    
    public void Insert_Discount_Dumpster(String strResponse,Messaging.InboundEmail email)
    {
    
        List<string> DumpsterPickUpvisitDate = new List<String>();
        //List<string> PhoneNumber = new List<String>();
        
        try
        {
            string resReplaceLine = strResponse.replace('\n','<br>');
                                
            strResponse = strResponse.replace('\n','<br>');
            System.debug('<<<>>>'+strResponse);
            
            String AccountParse = StrResponse.substringAfter('====').SubstringAfter('<br>').substringBefore('<br>');
            system.debug(AccountParse);
            if(AccountParse.contains('Discount Dumpster'))
                   AccountName ='Discount Dumpster Rental';
           
           String MonthParse = Label.Month_To_Integer_PDF_Parse;
                Map<String,Integer> MonthMap = new Map<string,Integer>();
                Integer i=1;
                for(String StrMonth : MonthParse.split('-')){
                 MonthMap.put(StrMonth,i);
                 i++;
              }
           
           ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
           if(mc.EnableTestAccount__c){
                    AccountIdval = mc.TestAccountID__c;
                    system.debug('accid is'+AccountIdval);
                }else{
                    String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                    system.debug('account name list is--->'+AccountQuery);
                    AccountIdval = (Database.query(AccountQuery)).id;
                    system.debug('account name list is--->'+accountIdval);
                } 
            
            String DumpsterSize = StrResponse.tolowercase().SubstringAfter('thank you').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();        //Ticket 23936
            system.debug(DumpsterSize);
            String PoNumber;
            if(StrResponse.contains('P.O. Number'))
            {
                PoNumber = StrResponse.SubstringAfter('P.O. Number').SubstringBefore('<br>').trim();
                DumpsterSize = StrResponse.tolowercase().SubstringAfter('p.o. number').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                system.debug(PoNumber);
            }
            else if(StrResponse.contains('P.O. '))            //Else if added for Ticket 25693
            {
                PoNumber = StrResponse.SubstringAfter('P.O. ').SubstringBefore('<br>').trim();
                DumpsterSize = StrResponse.tolowercase().SubstringAfter('p.o. ').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                system.debug(PoNumber);
            }
            if(StrResponse.contains('PO #'))
            {
                PoNumber = StrResponse.SubstringAfter('PO #').SubstringBefore('<br>').trim();
                DumpsterSize = StrResponse.tolowercase().SubstringAfter('po #').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                system.debug(PoNumber);
            }
             StrResponse.SubstringAfter('P.O. Number').SubstringBefore('<br>').trim();
            system.debug(PoNumber);
            
            String DeliveryDate = StrResponse.SubstringAfter('Dates:').SubstringAfter('<br>').SubstringBefore('New Delivery').trim();
            DumpsterDropOffvisitDate = DeliveryDate.split(' ');
            system.debug(DeliveryDate);
            
            String PickupDate = StrResponse.SubstringAfter('New Delivery').SubstringAfter('<br>').SubstringBefore('Pickup').trim();
            DumpsterPickUpvisitDate = PickupDate.split(' ');
            system.debug(PickupDate);
            
            String DeliveryAddress = StrResponse.SubstringAfter('Delivery Address:').SubstringAfter('<br>').SubstringBefore('<br><br>').trim();
            system.debug(DeliveryAddress);
            
            String Phone1 = StrResponse.SubstringAfter('Onsite Contact:').SubstringAfter('<br>').SubstringBefore('<br>PLEASE CALL OUR').trim();
            //PhoneNumber = Phone1.split(' ');
            
            string PhoneNumber;
            if(email.plainTextBody != null)
            {
                PhoneNumber = Phone1.SubString(Phone1.lastIndexOf('<br>'),Phone1.length());
            }
            else if(email.plainTextBody == null && email.htmlbody != null)
            {
                PhoneNumber = Phone1.SubString(Phone1.lastIndexOf(' '),Phone1.length());
            }
            system.debug(PhoneNumber);
            
            //Integer Phone2 = PhoneNumber.size();
            //system.debug(Phone2);
            
            String Comments = StrResponse.SubstringAfter('Placement Instructions:').SubstringAfter('<br>').SubstringBefore('<br><br>Dumpster Contents:').trim();
            system.debug(Comments);
             transition__c transition = new transition__c();
              transition.Html_body__c =StrResponse;
              transition.Account__c=' I-Discount dumpster';
            transition.Email_subject__c = email.subject;
  insert transition;
         
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=PoNumber;
                log.po_date__c=String.valueOf(DumpsterDropOffvisitDate);
                log.phone_number__c=PhoneNumber;
                    log.Comments__c=Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;   
    log.Account__c='Discount dumpster';
   
   
   
    log.Type__c='New delivery- Discount dumpster';
            
            insert log;
            Dumpsters__c dumpster = new Dumpsters__c();
            dumpster.AAccountccount__c              = AccountIdval;
            dumpster.Status__c                      = 'Unscheduled';
            //dumpster.DifferentDriverSameAddress__c  = TRUE;
            dumpster.Purchase_Order__c              = PoNumber;
            dumpster.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+MonthMap.get(DumpsterPickUpvisitDate[1])+'-'+DumpsterPickUpvisitDate[0]);
            dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+MonthMap.get(DumpsterDropOffvisitDate[1])+'-'+DumpsterDropOffvisitDate[0]);
            dumpster.Dumpster_Size__c               = DumpsterSize+'yd';
            dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
            //if(PhoneNumber.size()>0)
            dumpster.Phone_Number_2__c              = PhoneNumber.replace('<br>','');
            dumpster.Email_Success_helper__c        = AccountIdval;
            dumpster.PDF_From_Email__c              = Label.Discount_Dumpster_Rental_Success_Email;
            dumpster.Rental__c                      = 'Dumpster Rental';
            dumpster.Comments__c                    = Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
            //dumpster.X10_Days_Rental_Up_Date__c = system.now();
            
            if(dumpster.Dumpster_Size__c == '40yd'){        //12804 we are using custom label 'Pdf parser Driver Assigner'
            dumpster.Driver__c = Label.X40ydDriver;  
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Driver__c = Label.X20ydDriver;
            }
            
            if(dumpster.Dumpster_Size__c == '40yd'){
            dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
            }    
            
            Set<String> HoustonZipcodes = new Set<String>();
            integer Count; String trimmedZip ;
            String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
            String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
            HoustonZipcodes.addall(Zipcode1);
            HoustonZipcodes.addall(Zipcode2);
            for(String zip : HoustonZipcodes){
            trimmedZip = zip.trim();
            if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                Count= 1;
            }
            if(Count==1)
            {
                Dumpster.Houston_Helper__c = True; 
                Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                dumpster.Driver__c = label.HoustonDriver;
                dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
            }
            
            insert dumpster;
            
            System.debug('<<<dumpster>>>'+dumpster);
            system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
            //Process of Email attachment creation
            Attachment EmlAttachment   = new Attachment();                           //12916
            EmlAttachment.Name         = email.Subject + '.eml';
            if(email.htmlBody != null)
            {
            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
            }
            else
            {
            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
            }
            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
            EmlAttachment.ParentId     = dumpster.Id;
            EmlAttachment.IsPrivate    = false;
            AttachmentList.add(EmlAttachment);
            
            
            //Process of Attachment creations
            if(AttachmentList.size()>0){
            system.debug('attachment list size '+attachmentlist.size());
            insert AttachmentList;
            }
            
            List<Id> DumpstersId = new List<Id>();
            if(dumpster.Id != null)
                DumpstersId.add(dumpster.Id);
            if(DumpstersId.size() > 0)
            {
                send_Reply(DumpstersId, email); 
            }
        }
        catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null); //14169
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);  //12724    //14169
            }   
    }

/*==================================Ticket No: 27337=======================================================
*Method Name     : CloneLibertyDumpster
*Description     : Parsing PDF and update the Dumpster Record And clone;
*Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Clone or updation
===========================================================================================================*/
    
    public void CloneLibertyDumpster(String strResponse,Messaging.InboundEmail email)
    {
        String DropOffVisitDate;
        Date DumpsterDropOfVisitDate;
        
        try
        { 
            Dumpsters__c clonedumpster = new Dumpsters__c();
            List<Dumpsters__c> dumplist = new List<Dumpsters__c>(); 
            string resReplaceLine = strResponse.replace('\n','<br>');
            
            strResponse = strResponse.replace('&nbsp;',' ');        //Ticket 21598, 21603, 21605
            strResponse = strResponse.replace('&amp;','&');         //Ticket 21598, 21603, 21605
            
            strResponse = strResponse.replace('\n','<br>');
            strResponse = strResponse.replace('????','fi'); // Ticket No : 12662
            
            String MonthParse = Label.MonthToIntegerPDFParse;
            Map<String,Integer> MonthMap = new Map<string,Integer>();
            Integer i=1;
            for(String StrMonth : MonthParse.split('-')){
            MonthMap.put(StrMonth,i);
            i++;
            }
            
            System.debug('<<<>>>'+strResponse);
            String AccountParse = StrResponse.substringAfter('Original PO:').substringBefore('DELIVERY ADDRESS:');
            if(AccountParse.contains('Liberty Dumpster'))
            AccountName ='Liberty Dumpster';
            
            DumpsterSizeParser = strResponse.substringAfter('PLACEMENT/PERMIT:').substringbefore('DELIVERY DATE & TIME:');
            system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
            
            
            DumpsterSizeParser = DumpsterSizeParser.tolowercase().substringbefore('<br><br>');
            DumpsterSize = DumpsterSizeParser.substringAfter('switchout');
            System.debug('<<<DumpSize>>>'+DumpsterSize);
            DumpsterSize=DumpsterSize.SubString(DumpsterSize.IndexOf(' '),3).trim();
            
            System.debug('<<<DumpsterSize>>>'+DumpsterSize);
            if(DumpsterSize=='10' || DumpsterSize=='10 '){
            DumpsterSize='20';
            }
            
            ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');  // Ticket No : 12623
            if(mc.EnableTestAccount__c){
            AccountIdval = mc.TestAccountID__c;
            system.debug('accid is'+AccountIdval);
            }else{
            String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
            system.debug('account name list is--->'+AccountQuery);
            AccountIdval = (Database.query(AccountQuery)).id;
            system.debug('account name list is--->'+accountIdval);
            } 
            
            string PurchaseOrder = strResponse.substringAfter('Original PO:').substringbefore(' from').substringAfter('INV-');
            purchaseOrderNumber='INV-'+PurchaseOrder;
            
            string PartsResult;
            String DeliveryAddress;
            if(email.plainTextBody != null)
            {
            PartsResult = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('<br>');        //Ticket 21464
            DeliveryAddress = PartsResult;
            system.debug('DeliveryAddress --->>'+DeliveryAddress);
            }
            else if(email.plainTextBody == null && email.htmlbody != null)        //IF else for Ticket 21464
            {
            PartsResult = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('<br>');
            DeliveryAddress = PartsResult;
            system.debug('DeliveryAddress --->>'+DeliveryAddress);
            }
            
            
            String PhoneNo = strResponse.substringAfter('DELIVERY ADDRESS:').substringAfter('<br>').substringbefore('SIZE, DEBRIS TYPE,').substringAfter(' ').substringbefore('<br><br>');
            
            PhoneNo = PhoneNo.substringAfter('<br>');
            System.debug(PhoneNo);
            
            String regex = '[a-zA-Z]{1,}';
            String Phone = PhoneNo.replaceAll(regex, '').trim();
            if(Phone.Length()-1 == Phone.lastindexOf('-'))
            {
            Phone = Phone.removeEnd('-');
            system.debug(Phone);
            }
            else
            {
            System.debug(Phone);
            }
            
            //PhoneNo=PhoneNo.SubString(PhoneNo.IndexOf('<br><br>')-13,PhoneNo.IndexOf('<br><br>'));
            //PhoneNo =PhoneNo.SubString(PhoneNo.IndexOf(strResponse.substringAfter('DELIVERY ADDRESS: <br>').substringbefore('SIZE, DEBRIS TYPE,').lastIndexOfIgnoreCase(' '),strResponse.IndexOf('SIZE, DEBRIS TYPE,'))
            System.debug('PhoneNo---------->'+PhoneNo);
            PhoneNo=PhoneNo.SubString(phoneNo.lastIndexOf(' '),phoneNo.length());
            string Commentparse = strResponse.substringAfter('SIZE, DEBRIS TYPE, PLACEMENT/PERMIT: <br>').substringbefore('<br><br>DELIVERY DATE & TIME:').substringAfter(',  ');
            
            Boolean CheckRecord = false;
            
            String DropVisitDate;        
            DropOffVisitDate=strResponse.substringAfter('DELIVERY DATE').substringbefore('PICKUP DATE');
            for(String MonthFor : MonthMap.keyset()){
            //System.debug('<<<MonthFor>>>>'+MonthFor);
            If(DropOffVisitDate.contains(MonthFor)){
            DropVisitDate=MonthFor+DropOffVisitDate.substringAfter(MonthFor).substringbefore('from');
            //System.debug('<<<DropVisitDate>>>'+DropVisitDate);
            }
            }
            
            DropOffVisitDate=DropVisitDate;
            System.debug('<<<DropOffVisitDate>>>'+DropOffVisitDate);
            transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c=' clone liberty dumpster';
            transition.Email_subject__c = email.subject;
  insert transition;
          
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=purchaseOrderNumber;
              
                log.phone_number__c=PhoneNo;
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;  
                log.Comments__c=Label.Update_Comments_Field +'\n' +Commentparse;
                log.Account__c='liberty dumpster';
                               log.Final_pickup_date__c='null';
    
    log.Type__c='clone -liberty';
    log.po_date__c=DropOffVisitDate;
     insert log;           

            
            for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, Comments_Helper__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Pdf_Parser_Delivery_Address__c like: DeliveryAddress and (Status__c='Drop Off Complete' or Status__c='Request for Pick-Up') and Dumpster_Size__c=:DumpsterSize+'yd']))
            {   
                CheckRecord=True;
                dumplist.add(dump);
            }   
            If(dumplist.size()<2)
            {
                for(Dumpsters__c dump : dumplist)
                {
                    system.debug('dumpster value is'+dump);
                    CloneDumpster=dump.clone(false,false);
                    CloneDumpster.Driver__c = dump.Pick_Up_Driver__c; // Ticket 20893
                    CloneDumpster.Comments__c = dump.Comments_Helper__c;
                    dump.Status__c = 'Request for Pick-Up';
                    dump.Email_Success_helper__c = 'Request for Pick-Up';
                    dump.PDF_From_Email__c              = Label.Liberty_Dumpster_Success_Email;
                    if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                      {
                          dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                      }
                    dump.Confirmed_Pick_Up_Date__c = Date.valueOf(DropOffVisitDate.SubString(DropOffVisitDate.Indexof(', ')+2,DropOffVisitDate.Indexof(', ')+6)+ '-' +MonthMap.get(DropOffVisitDate.substringBefore(' ')) + '-' +DropOffVisitDate.substringAfter(' ').substringBefore(',') );
                    
                }
                if(Dumplist.size() > 0)
                {
                    update dumplist;
                    
                }
                System.debug(CloneDumpster);
                if(CloneDumpster.AAccountccount__c!=null)
                {
                    CloneDumpster.Purchase_Order__c              = purchaseOrderNumber;
                    CloneDumpster.Status__c                      = 'Unscheduled';
                    //Clonedumpster.DifferentDriverSameAddress__c  = TRUE;
                    CloneDumpster.Email_Success_helper__c        = 'Clone Dumpster';
                    clonedumpster.PDF_From_Email__c              = Label.Liberty_Dumpster_Success_Email;
                    clonedumpster.Comments__c                    = Label.Update_Comments_Field +'\n' +Commentparse;
                    if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                      {
                          clonedumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                      }
                    CloneDumpster.Is_Cloning__c=true;
                    CloneDumpster.PDF_From_Email__c              = Label.Liberty_Dumpster_Success_Email;            //Ticket 20245
                    System.debug('<<<email.PlainTextBody>>>'+email.PlainTextBody);
                    
                    if(clonedumpster.Dumpster_Size__c == '40yd'){
                    clonedumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                    }
                    else if(clonedumpster.Dumpster_Size__c == '30yd'){
                    clonedumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                    }
                    else if(clonedumpster.Dumpster_Size__c == '20yd'){
                    clonedumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                    } 
                    
                    Set<String> HoustonZipcodes = new Set<String>();
                    integer Count; String trimmedZip ;
                    String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                    String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                    HoustonZipcodes.addall(Zipcode1);
                    HoustonZipcodes.addall(Zipcode2);
                    for(String zip : HoustonZipcodes){
                    trimmedZip = zip.trim();
                    if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                        Count= 1;
                    }
                    if(Count==1)
                    {
                        clonedumpster.Houston_Helper__c = True; 
                        clonedumpster.Haulbrooke_Regional_Base__c = 'Houston';
                        clonedumpster.Driver__c = label.HoustonDriver;
                        clonedumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                    }
                    
                    
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-').containsIgnoreCase('am')){
                    String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-');
                    DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                    DropOffVisitTime=DropOffVisitTime.replace('am','');
                    if(DropOffVisitTime.contains(':'))                               //13152
                    DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                    clonedumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'am';
                    }              
                    
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-').containsIgnoreCase('pm')){
                    String DropOffVisitTime=strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('-');
                    DropOffVisitTime=DropOffVisitTime.toLowerCase(); 
                    DropOffVisitTime=DropOffVisitTime.replace('pm','');
                    if(DropOffVisitTime.contains(':'))                                         //13152
                    DropOffVisitTime=DropOffVisitTime.substringbefore(':');
                    clonedumpster.Drop_Off_Visit_Time__c=DropOffVisitTime+'pm';
                    }
                    
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('7-12pm')){
                    clonedumpster.Drop_Off_Visit_Time__c='9am';  
                    }
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('6:00-9:00')){     //15531
                    clonedumpster.Drop_Off_Visit_Time__c='6am';  
                    }
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('6-12')){  //13096
                    clonedumpster.Drop_Off_Visit_Time__c='9am'; 
                    }
                    
                    if(strResponse.substringAfter('DELIVERY DATE & TIME:').substringbefore('PICKUP DATE:').substringAfter('from ').substringbefore('<br><br>').containsIgnoreCase('12-6')){  //13097
                    clonedumpster.Drop_Off_Visit_Time__c='2pm'; 
                    }
                    
                    
                    clonedumpster.Drop_Off_Visit_Date__c = Date.valueOf(DropOffVisitDate.SubString(DropOffVisitDate.Indexof(', ')+2,DropOffVisitDate.Indexof(', ')+6)+ '-' +MonthMap.get(DropOffVisitDate.substringBefore(' ')) + '-' +DropOffVisitDate.substringAfter(' ').substringBefore(',') );
                    System.debug('<<clonedumpster.Drop_Off_Visit_Date__c>>'+clonedumpster.Drop_Off_Visit_Date__c);
                    DumpsterDropOfVisitDate= clonedumpster.Drop_Off_Visit_Date__c;
                    
                    String ConfirmedPickUpDate;        
                    String ConfirmPickUpDate;
                    ConfirmPickUpDate=strResponse.substringAfter('PICKUP DATE').substringbefore('<br><br>We');
                    for(String MonthFor : MonthMap.keyset()){
                    //System.debug('<<<MonthFor>>>>'+MonthFor);
                    If(ConfirmPickUpDate.contains(MonthFor)){
                    ConfirmPickUpDate=MonthFor+ConfirmPickUpDate.substringAfter(MonthFor);
                    //System.debug('<<<DropVisitDate>>>'+DropVisitDate);
                    }
                    }
                    
                    ConfirmedPickUpDate=ConfirmPickUpDate;
                    System.debug('<<<ConfirmedPickUpDate>>>'+ConfirmedPickUpDate);
                    clonedumpster.Confirmed_Pick_Up_Date__c = Date.valueOf(ConfirmedPickUpDate.SubString(ConfirmedPickUpDate.Indexof(', ')+2,ConfirmedPickUpDate.Indexof(', ')+6)+ '-' +MonthMap.get(ConfirmedPickUpDate.substringBefore(' ')) + '-' +ConfirmedPickUpDate.substringAfter(' ').substringBefore(',') );
                    System.debug('<<clonedumpster.Confirmed_Pick_Up_Date__c >>'+clonedumpster.Confirmed_Pick_Up_Date__c );
                    
                    insert CloneDumpster; 
                    //Process of Email attachment creation
                    Attachment EmlAttachment   = new Attachment();
                    EmlAttachment.Name         = email.Subject + '.eml';
                    if(email.htmlBody != null)
                    {
                        EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                    }
                    else
                    {
                        EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                    }
                    EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                    EmlAttachment.ParentId     = CloneDumpster.Id;
                    EmlAttachment.IsPrivate    = false;
                    AttachmentList.add(EmlAttachment);
                    
                    
                    //Process of Attachment creations
                    if(AttachmentList.size()>0)
                    {
                        system.debug('attachment list size '+attachmentlist.size());
                        insert AttachmentList;
                    }           
                } 
                
                List<Id> DumpstersId = new List<Id>();
                for(Dumpsters__c DumpstersFor : dumplist)
                {
                    DumpstersId.add(DumpstersFor.Id);
                }
                if(clonedumpster.Id != null)
                    DumpstersId.add(clonedumpster.Id);
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email); 
                }
            }
            else
            {
                SendingEmailMultipleDumpsterFound(Dumplist);
            }
            if(!CheckRecord){
             SendingMailNoRecord(DumpsterSize,DeliveryAddress,PurchaseOrderNumber);
            }
            
            /*if(clonedumpster.Dumpster_Size__c == '40yd'){
            clonedumpster.Driver__c = Label.X40ydDriver;  
            }
            else if(clonedumpster.Dumpster_Size__c == '30yd'){
            clonedumpster.Driver__c = Label.X30ydDriver;
            }
            else if(clonedumpster.Dumpster_Size__c == '20yd'){
            clonedumpster.Driver__c = Label.X20ydDriver;
            }*/
            
            
            /*
            //String ConfirmedPickUpDate=strResponse.substringAfter('PICKUP DATE:').substringbefore('<br><br>We').substringAfter('<br>').substringAfter(', ');
            //System.debug('<<<ConfirmedPickUpDate>>>'+ConfirmedPickUpDate);
            
            //clonedumpster.Confirmed_Pick_Up_Date__c = Date.valueOf(ConfirmedPickUpDate.substringAfter(', ').substringBefore(' ') + '-' +MonthMap.get(ConfirmedPickUpDate.substringBefore(' ')) + '-' +ConfirmedPickUpDate.substringAfter(' ').substringBefore(',') );
            
            insert clonedumpster;
            
            System.debug('<<<dumpster>>>'+clonedumpster);
            system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
            //Process of Email attachment creation
            Attachment EmlAttachment   = new Attachment();                           //12916
            EmlAttachment.Name         = email.Subject + '.eml';
            if(email.htmlBody != null)
            {
            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
            }
            else
            {
            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
            }
            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
            EmlAttachment.ParentId     = clonedumpster.Id;
            EmlAttachment.IsPrivate    = false;
            AttachmentList.add(EmlAttachment);
            
            
            //Process of Attachment creations
            if(AttachmentList.size()>0){
            system.debug('attachment list size '+attachmentlist.size());
            insert AttachmentList;
            }*/
        
        }
        catch(DMLException e)
        { //Handling exception here
            system.debug('Exception raised due to ---->'+e);
            SendingErrormail(e.getDmlMessage(0),DropOffVisitDate,DumpsterDropOfVisitDate); //14169
        }
        catch(Exception e)
        { //Handling exception here
            system.debug('Exception raised due to ---->'+e);
            SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),DropOffVisitDate,DumpsterDropOfVisitDate);  //12724    //14169
        }
    }
    
    /*==================================Ticket No: 30652=======================================================
    *Method Name     : public static void CloneDumpsterRecord(String BodyContValue)
    *Description     : Parsing PDF and update the Dumpster Record And clone;
    *Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Clone or updation
    ===========================================================================================================*/   
    Public Static Void SwapoutDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email)
    {
        Integer PartsCount;
        Integer endCount;
        string PartsResult;
        string DumpsterSizeOld;
        Boolean CheckRecord=false;
        
        if(strResponse != null) 
        {
            try
            {
                List<Dumpsters__c> dumplist = new List<Dumpsters__c>(); 
                Dumpsters__c CloneDumpster = new Dumpsters__c();
                
                string resReplaceLine = strResponse.replace('\n','<br>');
                System.debug('<<<email>>>'+email);
                strResponse = strResponse.replace('\n','<br>');
                System.debug('<<<strResponse>>>'+strResponse);
                system.debug('Po Number '+purchaseOrderNumber);Response = strResponse.replace('??','fi');
                
                //Process for Number of PO Numberfinding   
                if(strResponse.Contains('<br>PO Date'))
                { 
                    PartsCount  = strResponse.IndexOf('<br>PO Date');
                    endCount = strResponse.IndexOf('<br>Delivery');
                    PartsResult = strResponse.SubString(PartsCount+30,endCount-1);
                    PartsResult = PartsResult.Replace('<br>',''); 
                    purchaseOrderNumber = PartsResult;
                    
                    if(purchaseOrderNumber.contains('\t'))
                    {
                        purchaseOrderNumber = purchaseOrderNumber.SubStringAfter('\t');
                        system.debug('Po Number is'+purchaseOrderNumber);
                    }
                    system.debug('Po Number in outside'+purchaseOrderNumber);
                }
                else
                {
                    string PurchaseNoString = StrResponse.SubstringAfter('<br>DUMPSTER ORDER').SubstringBefore('<br>Delivery Address  Rep Delivery Date   <br>');
                    system.debug('PurchaseNoString '+PurchaseNoString);
                    
                    purchaseOrderNumber = PurchaseNoString.SubstringAfter('PO Date').substringAfter('<br>').subStringBefore('<br>Delivery Address').substringAfter('\t').substringAfter('\t').substringAfter('\t').substringAfter('\t').trim();
                    system.debug('purchaseOrderNumber '+purchaseOrderNumber);
                }
                
                // Delivery Address
                
                PartsCount  = strResponse.IndexOf('Delivery Date');
                if(strResponse.contains('TX '))
                {
                    endCount = strResponse.IndexOf('TX ');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX ')+8);                
                }
                else if(strResponse.contains('TX<br>'))
                {
                    endCount = strResponse.IndexOf('TX<br>');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX<br>')+12);
                    PartsResult = PartsResult.Replace('TX<br>','TX ');
                }
                
                if(strResponse.contains('TX <br>'))
                {
                    endCount = strResponse.IndexOf('TX <br>');
                    PartsResult = strResponse.SubString(strResponse.IndexOf('Delivery Date')+18,strResponse.IndexOf('TX <br>')+12);
                    PartsResult = PartsResult.Replace('TX <br>','TX ');
                }
                if(strResponse.contains('TX ,'))
                {
                    system.debug('inside the TX ,');
                    endCount = strResponse.IndexOf('TX ,');                                                                        
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+15);    
                    PartsResult = PartsResult.Replace('\t<br>','');
                }
                
                Integer Startcountold;
                Integer Endcountold;
                DumpsterSizeOld = strResponse.SubStringAfter('<br>Delivery Instructions').SubStringBefore('<br>Contacts For Delivery');
                if(DumpsterSizeOld.toLowerCase().contains('yard'))
                {
                    Startcountold = DumpsterSizeOld.toLowerCase().IndexOf('yard');
                    DumpsterSizeOld = DumpsterSizeOld.SubString(Startcountold-3,Startcountold);
                }
                if(DumpsterSizeOld.toLowerCase().contains('yd'))
                {
                    Startcountold = DumpsterSizeOld.toLowerCase().IndexOf('yd');
                    DumpsterSizeOld = DumpsterSizeOld.SubString(Startcountold-3,Startcountold);
                }
                DumpsterSizeOld = DumpsterSizeOld.trim() + 'yd';
                system.debug(DumpsterSizeOld);
                
                if(strResponse.contains('Texas ,'))
                {
                    system.debug('inside the Texas ,');
                    EndCount = strResponse.IndexOf('Texas ,');                                                                       
                    PartsResult = strResponse.SubString(PartsCount+18,endcount+18);   
                    PartsResult = PartsResult.Replace('/t',''); 
                    PartsResult = PartsResult.Replace('<br>','');
                }
                
                system.debug(PartsResult);
                PartsResult = PartsResult.Replace('<br>',' , ');
                String DeliveryAddress = PartsResult;
                DeliveryAddress = DeliveryAddress.replaceAll('\\t+', ' ');
                DeliveryAddress = DeliveryAddress.replaceAll(',  ', ', ');
                
                String DeliveryAddresscheck;
                DeliveryAddresscheck = DeliveryAddress.replaceAll(',', '');
                DeliveryAddresscheck = DeliveryAddresscheck.replaceAll(' ', '');
                system.debug('DeliveryAddress --->>'+DeliveryAddress);
                system.debug('DeliveryAddresscheck --->>'+DeliveryAddresscheck);
                
                /*
                PartsResult = PartsResult.Replace('<br>',' , ');
                String DeliveryAddress = PartsResult;
                system.debug('DeliveryAddress --->>'+DeliveryAddress);*/
                
                //Process of Dumpster Size 
                DumpsterSizeParser = strResponse.SubString(strResponse.IndexOf('<br>Qty'),strResponse.IndexOf('</pre>'))+'</pre>';
                system.debug('DumpsterSizeParser  --->>'+DumpsterSizeParser );  
                
                String DumpsterSize;
                if(DumpsterSizeParser.contains('- -'))
                {
                    DumpsterSize= DumpsterSizeParser.SubStringAfter('- - ').substringBefore(' yard')+'yd';
                }
                
                if(DumpsterSizeParser.contains('- HEAVY -'))
                {
                    DumpsterSize= DumpsterSizeParser.SubStringAfter('- HEAVY - ').substringBefore(' yard')+'yd';
                }
                
                //Delivery Date
                String StrDate=strResponse.SubstringBefore('Order Type').SubStringAfter('Delivery Date');
                System.debug('StrDate1'+StrDate);
                System.debug('Contains:'+StrDate.Contains('<br> <br>'));
                if(StrDate.Contains('<br> <br>')){
                StrDate=StrDate.replace('<br> <br>','<br>');
                Integer StrLen=strDate.length();
                PartsResult = StrDate.SubString(StrLen-18,StrLen-6);
                System.debug('PartsResult:'+PartsResult);
                
                }
                else
                {
                    PartsCount  = strResponse.IndexOf('<br>Order Type');
                    System.debug('PartsCount:'+PartsCount);
                    PartsResult = strResponse.SubString(PartsCount-11,PartsCount);        //Ticket 21046
                    System.debug('PartsResult:'+PartsResult);
                }
                DumpsterDropOffvisitDate=PartsResult.split('/');
                System.debug('DropOffDate'+DumpsterDropOffvisitDate);
                System.debug('DeliveryAddress'+DeliveryAddress);
                System.debug('DumpsterSize'+DumpsterSize);
                
                System.debug([Select id, Name,Driver__c, AAccountccount__c,Comments_Helper__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Delivery_Address_PDF_Helper__c=:DeliveryAddresscheck and Status__c='Drop Off Complete' and  Dumpster_Size__c=:DumpsterSizeOld]);
                // Update Current record  
                transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c=' Swap out';
                transition.Email_subject__c = email.subject;
  insert transition;
          
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=purchaseOrderNumber;
              
                
                
                
    log.Type__c='Swap out';
    log.po_date__c=string.valueof(DumpsterDropOffvisitDate);
     insert log;        
                for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, Comments_Helper__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c from Dumpsters__c where Delivery_Address_PDF_Helper__c=:DeliveryAddresscheck and Status__c='Drop Off Complete' and  Dumpster_Size__c=:DumpsterSizeOld]))
                {   
                    CheckRecord=True;
                    dumplist.add(dump);
                }   
                If(dumplist.size()<2)
                {
                    for(Dumpsters__c dump : dumplist)
                    {
                        system.debug('dumpster value is'+dump);
                        CloneDumpster=dump.clone(false,false);
                        CloneDumpster.Driver__c = dump.Pick_Up_Driver__c; // Ticket 20893
                        CloneDumpster.Comments__c = dump.Comments_Helper__c;
                        dump.Status__c = 'Request for Pick-Up';
                        if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                      {
                          dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                      }
                        //dump.Dumpster_Size__c = DumpsterSize;
                        dump.Email_Success_helper__c = 'Request for Pick-Up';
                        //dump.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                        dump.Confirmed_Pick_Up_Date__c = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);   
                    }
                    if(Dumplist.size() > 0)
                    {
                        update dumplist;
                        
                    }
                    System.debug(CloneDumpster);
                    if(CloneDumpster.AAccountccount__c!=null)
                    {
                        CloneDumpster.Purchase_Order__c              =purchaseOrderNumber;
                        CloneDumpster.Status__c                      ='Unscheduled';
                        //Clonedumpster.DifferentDriverSameAddress__c  = TRUE;
                        CloneDumpster.Dumpster_Size__c               = DumpsterSize;
                        CloneDumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[0].replaceAll('\\s','') + '-' + DumpsterDropOffvisitDate[1]);
                        CloneDumpster.Email_Success_helper__c        = 'Clone Dumpster';
                        if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                          {
                              CloneDumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                          }
                        CloneDumpster.Container_Asset__c = null;
                        CloneDumpster.Is_Cloning__c=true;
                        //CloneDumpster.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                        System.debug('<<<email.PlainTextBody>>>'+email.PlainTextBody);
                        insert CloneDumpster; 
                        //Process of Email attachment creation
                        Attachment EmlAttachment   = new Attachment();
                        EmlAttachment.Name         = email.Subject + '.eml';
                        if(email.htmlBody != null)
                        {
                            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                        }
                        else
                        {
                            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                        }
                        EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                        EmlAttachment.ParentId     = CloneDumpster.Id;
                        EmlAttachment.IsPrivate    = false;
                        AttachmentList.add(EmlAttachment);
                        
                        
                        //Process of Attachment creations
                        if(AttachmentList.size()>0)
                        {
                            system.debug('attachment list size '+attachmentlist.size());
                            insert AttachmentList;
                        }           
                    }
                    
                    List<Id> DumpstersId = new List<Id>();
                    for(Dumpsters__c DumpstersFor : dumplist)
                    {
                        DumpstersId.add(DumpstersFor.Id);
                    }
                    if(clonedumpster.Id != null)
                        DumpstersId.add(clonedumpster.Id);
                    if(DumpstersId.size() > 0)
                    {
                        send_Reply(DumpstersId, email);
                    }
                }
                else
                {
                    SendingEmailMultipleDumpsterFound(Dumplist);
                }
                if(!CheckRecord){
                 SendingMailNoRecord(DumpsterSizeold,DeliveryAddress,PurchaseOrderNumber);
                }
            }
            catch(DMLException e)
            { //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),'null',null);            
            }
            catch(Exception e)
            { //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),'null',null);
            }   
            
        } 
    }
    
    /*================================== Ticket No: 33722 =======================================================
    *Method Name     : Detritus_Dumpster_Insert(String strResponse,Messaging.InboundEmail email)
    *Description     : Parsing PDF and create the Dumpster Record for Detritus Account
    *Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Clone or updation
    ===========================================================================================================*/
    
    public static void Detritus_Dumpster_Insert(String strResponse,Messaging.InboundEmail email)
    {
        try
        {
            
            List<string> DumpsterPickUpvisitDate = new List<String>();
            
            string resReplaceLine = strResponse.replace('\n','<br>');
            
            strResponse = strResponse.replace('\n','<br>');
            System.debug('<<<>>>'+strResponse);
            
            String AccountParse = StrResponse.substringAfter('====').SubstringAfter('<br>').substringBefore('<br>');
            system.debug(AccountParse);
            
            if(strResponse.contains('Detritus LLC'))
                AccountName ='Detritus';
            
            ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
            if(mc.EnableTestAccount__c)
            {
                AccountIdval = mc.TestAccountID__c;
                system.debug('accid is'+AccountIdval);
            }
            else
            {
                String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                system.debug('account name list is--->'+AccountQuery);
                AccountIdval = (Database.query(AccountQuery)).id;
                system.debug('account name list is--->'+accountIdval);
            }
            
            String PoNumber;
            PoNumber = StrResponse.SubstringAfter('<br>Deal #:').SubstringBefore('Dumpster #:').Replace('<br>','').trim();
            system.debug(PoNumber);
            
            String DeliveryAddress = StrResponse.SubstringAfter('Delivery Address:').SubstringBefore('Dumpster Size:').Replace('<br>','').trim();
            system.debug(DeliveryAddress);
            
            String DumpsterSize = StrResponse.SubstringAfter('Dumpster Size:').SubstringBefore('Delivery Date:').Replace('<br>','').trim();
            DumpsterSize = DumpsterSize.tolowercase().SubstringBefore('yard').trim();
            system.debug(DumpsterSize);
            
            String DeliveryDate = StrResponse.SubstringAfter('Delivery Date:').SubstringBefore('Removal Date:').Replace('<br>','').trim();
            DumpsterDropOffvisitDate = DeliveryDate.split('/');
            system.debug(DumpsterDropOffvisitDate);
            
            String PickupDate = StrResponse.SubstringAfter('Removal Date:').SubstringBefore('Setting Instructions:').Replace('<br>','').trim();
            DumpsterPickUpvisitDate = PickupDate.split('/');
            system.debug(DumpsterPickUpvisitDate.size());
            
            String Comments = StrResponse.SubstringAfter('Setting Instructions:').SubstringBefore('<br><br><br>').Replace('<br>','\n').trim();
            system.debug(Comments);
            
            String PhoneNumber = StrResponse.SubstringAfter('Setting Instructions:').SubstringAfter('Please call').SubstringBefore('<br><br>').trim();
            PhoneNumber = PhoneNumber.replace('<br>', '').SubstringAfter('route:').trim();
            system.debug(PhoneNumber);
            transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c=' Detrius dumpster';
            transition.Email_subject__c = email.subject;
  insert transition;
          
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=PoNumber ;
              
                log.phone_number__c=PhoneNumber;
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;  
                log.Comments__c=Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
                log.Account__c='Detrius dumpster';
                               log.Final_pickup_date__c='null';
    
    log.Type__c='Ne delivery-Detrius';
    log.po_date__c= string.valueof(DumpsterPickUpvisitDate);
     insert log;           

            Dumpsters__c dumpster = new Dumpsters__c();
            dumpster.AAccountccount__c              = AccountIdval;
            dumpster.Status__c                      = 'Unscheduled';
            //dumpster.DifferentDriverSameAddress__c  = TRUE;
            dumpster.Purchase_Order__c              = PoNumber;
            if(DumpsterPickUpvisitDate.size()==3)
            {
                dumpster.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+DumpsterPickUpvisitDate[0]+'-'+DumpsterPickUpvisitDate[1]);
            }
            dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+DumpsterDropOffvisitDate[0]+'-'+DumpsterDropOffvisitDate[1]);
            dumpster.Dumpster_Size__c               = DumpsterSize+'yd';
            dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
            dumpster.Phone_Number_2__c              = PhoneNumber;
            dumpster.Email_Success_helper__c        = AccountIdval;
            dumpster.Rental__c                      = 'Dumpster Rental';
            dumpster.Comments__c                    = Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
            
            if(dumpster.Dumpster_Size__c == '40yd'){
            dumpster.Driver__c = Label.X40ydDriver;  
            dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Driver__c = Label.X30ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Driver__c = Label.X20ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
            }
            
            Set<String> HoustonZipcodes = new Set<String>();
            integer Count; String trimmedZip ;
            String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
            String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
            HoustonZipcodes.addall(Zipcode1);
            HoustonZipcodes.addall(Zipcode2);
            for(String zip : HoustonZipcodes){
            trimmedZip = zip.trim();
            if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                Count= 1;
            }
            if(Count==1)
            {
                Dumpster.Houston_Helper__c = True; 
                Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                dumpster.Driver__c = label.HoustonDriver;
                dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
            }
            
            insert dumpster;
            
            System.debug('<<<dumpster>>>'+dumpster);
            system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
            //Process of Email attachment creation
            Attachment EmlAttachment   = new Attachment();
            EmlAttachment.Name         = email.Subject + '.eml';
            if(email.htmlBody != null)
            {
            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
            }
            else
            {
            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
            }
            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
            EmlAttachment.ParentId     = dumpster.Id;
            EmlAttachment.IsPrivate    = false;
            AttachmentList.add(EmlAttachment);
            
            
            //Process of Attachment creations
            if(AttachmentList.size()>0){
            system.debug('attachment list size '+attachmentlist.size());
            insert AttachmentList;
            }
            
            List<Id> DumpstersId = new List<Id>();
            if(dumpster.Id != null)
                DumpstersId.add(dumpster.id);
            if(DumpstersId.size() > 0)
            {
                send_Reply(DumpstersId, email); 
            }
            
        }
        catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null);
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);
            }
        
    }
    
    /*================================== Ticket No: 36820 =======================================================
    *Method Name     : Upsert_Discount_Dumpster
    *Description     : Parsing PDF and create and update the Dumpster Record for Discount Dumpster Account
    *Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Clone or updation
    ===========================================================================================================*/
    
    public void Upsert_Discount_Dumpster(String strResponse,Messaging.InboundEmail email)
    {
    
        List<string> DumpsterPickUpvisitDate = new List<String>();
        //List<string> PhoneNumber = new List<String>();
        List<Dumpsters__c> dumplist = new List<Dumpsters__c>();
        Boolean CheckRecord=false;
        String PoNumber;  
         String DeliveryAddress;
              String AccountParse;
              string ContactInfo;
              string PhoneNumber;
              string PhoneNumberhelper;
              string[] PhoneNumbers;
              String DumpsterSize;
              Map<String,Integer> MonthMap = new Map<string,Integer>(); 
              String Comments;
        try
        {
            if(email.subject.containsIgnoreCase('- Swap')){
             strResponse = strResponse.replace('\n','<br>');
        strResponse = strResponse.replace('??','fi');
                    system.debug('>>DeliveryAddress<<:'+strResponse); 
                    PoNumber = strResponse.SubstringAfter('Order Number').SubstringBefore('Product Name').SubstringAfter('<br><br><br>').SubstringBefore('<br><br>').trim();      
                    DeliveryAddress = strResponse.SubstringAfter('Delivery Address').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br><br><br>').Substringafter('<br><br>').SubstringBefore('<br><br>').replace('<br>', ' ').trim();            
                   // DeliveryAddress = strResponse.SubstringAfter('Delivery Address').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br><br><br>').SubstringBefore('<br><br>').replace('<br>', ' ').trim();
                    system.debug('>>DeliveryAddress<<:'+DeliveryAddress);

                    if(strResponse.contains('Discount Dumpster'))
                       AccountParse ='Discount Dumpster Rental';
                    
                    ContactInfo = strResponse.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br><br><br>').SubstringAfter('<br><br>').SubstringAfter('<br><br>').SubstringBefore('<br><br>').replace('<br>', ' ').trim();
                    system.debug('>>ContactInfo<<:'+ContactInfo);
                    
                    PhoneNumberhelper = strResponse.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br><br><br>').SubstringAfter('<br><br>').SubstringAfter('<br><br>').SubstringBefore('<br><br>').trim();
                    PhoneNumbers = PhoneNumberhelper.split('<br>');
                    if(PhoneNumbers.size()>0)    Phonenumber = PhoneNumbers[PhoneNumbers.size() - 1];
                    
                    
                   string DeliveryDate = strResponse.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('Dumpster Contents').SubstringAfter('<br><br><br>').SubstringBefore('<br><br>').trim();
                    System.debug('>>DeliveryDate<<:'+DeliveryDate);
                    DumpsterDropOffvisitDate = DeliveryDate.split('/');
                    
                   string FinalPickupDate = strResponse.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('Dumpster Contents').SubstringAfter('<br><br><br>').SubstringAfter('<br><br>').SubstringBefore('<br><br>').trim();
                    DumpsterPickUpvisitDate = FinalPickupDate.split('/');
                    System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
                    
                    
                    DumpsterSize = strResponse.SubstringAfter('Product Name').SubstringBefore('Delivery Date ').SubstringAfter('Action Type').SubstringAfter('<br><br><br>').SubstringBefore('<br><br>').trim();
                    system.debug('>>ProductName<<:'+DumpsterSize);
                    if(DumpsterSize.containsignorecase('yard'))
                    {
                        DumpsterSize = DumpsterSize.tolowercase().substringbefore('yard').trim();
                        DumpsterSize =DumpsterSize+'yd';
                    }
                    
                    if(DumpsterSize.containsignorecase('yd'))
                    {
                        DumpsterSize = DumpsterSize.tolowercase().substringbefore('yd').trim();
                        DumpsterSize =DumpsterSize+'yd';
                    }
                    
                    
                    Comments = strResponse.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('Dumpster Contents').SubstringAfter('<br><br><br>').SubstringAfter('<br><br>').SubstringAfter('<br><br>').SubstringBefore('<br><br>').trim();
  //                  system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
                    
            }
            else{
                string resReplaceLine = strResponse.replace('\n','<br>');
                                    
                strResponse = strResponse.replace('\n','<br>');
                System.debug('<<<>>>'+strResponse);
                
                AccountParse = StrResponse.substringAfter('====').SubstringAfter('<br>').substringBefore('<br>');
                system.debug(AccountParse);
                
               
               String MonthParse = Label.Month_To_Integer_PDF_Parse;
                   
                    Integer i=1;
                    for(String StrMonth : MonthParse.split('-')){
                     MonthMap.put(StrMonth,i);
                     i++;
                  }
                
                DumpsterSize = StrResponse.tolowercase().SubstringAfter('thank you').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();        //Ticket 23936
                system.debug(DumpsterSize);
    
                if(StrResponse.contains('P.O. Number'))
                {
                    PoNumber = StrResponse.SubstringAfter('P.O. Number').SubstringBefore('<br>').trim();
                    DumpsterSize = StrResponse.tolowercase().SubstringAfter('p.o. number').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                    system.debug(PoNumber);
                }
                else if(StrResponse.contains('P.O. '))            //Else if added for Ticket 25693
                {
                    PoNumber = StrResponse.SubstringAfter('P.O. ').SubstringBefore('<br>').trim();
                    DumpsterSize = StrResponse.tolowercase().SubstringAfter('p.o. ').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                    system.debug(PoNumber);
                }
                if(StrResponse.contains('PO #'))
                {
                    PoNumber = StrResponse.SubstringAfter('PO #').SubstringBefore('<br>').trim();
                    DumpsterSize = StrResponse.tolowercase().SubstringAfter('po #').SubstringAfter(' - ').SubstringBefore('cubic yard ').trim();
                    system.debug(PoNumber);
                }
                 StrResponse.SubstringAfter('P.O. Number').SubstringBefore('<br>').trim();
                system.debug(PoNumber);
                
                String DeliveryDate = StrResponse.SubstringAfter('Dates:').SubstringAfter('<br>').SubstringBefore('Delivery Address:').SubstringBefore('Swap').trim();
                DumpsterDropOffvisitDate = DeliveryDate.split(' ');
                system.debug(DeliveryDate);
                
                String PickupDate =StrResponse.SubstringAfter('Dates:').SubstringAfter('<br>').SubstringBefore('Delivery Address:').SubstringAfter('Swap').SubstringAfter('<br>').SubstringBefore('Pickup').trim();
                DumpsterPickUpvisitDate = PickupDate.split(' ');
                system.debug(PickupDate);
                
                DeliveryAddress = StrResponse.SubstringAfter('Delivery Address:').SubstringAfter('<br>').SubstringBefore('<br><br>').trim();
                system.debug(DeliveryAddress);
                
                String Phone1 = StrResponse.SubstringAfter('Onsite Contact:').SubstringAfter('<br>').SubstringBefore('<br>PLEASE CALL OUR').trim();
                //PhoneNumber = Phone1.split(' ');
                
                
                if(email.plainTextBody != null)
                {
                    PhoneNumber = Phone1.SubString(Phone1.lastIndexOf('<br>'),Phone1.length());
                }
                else if(email.plainTextBody == null && email.htmlbody != null)
                {
                    PhoneNumber = Phone1.SubString(Phone1.lastIndexOf(' '),Phone1.length());
                }
                system.debug(PhoneNumber);
                
                //Integer Phone2 = PhoneNumber.size();
                //system.debug(Phone2);
                
                Comments = StrResponse.SubstringAfter('Placement Instructions:').SubstringAfter('<br>').SubstringBefore('<br><br>Dumpster Contents:').trim();
                system.debug(Comments);
                DumpsterSize=DumpsterSize+'yd';
                system.debug(DumpsterSize);
                 // Update Current record  
            } 
           
               if(AccountParse.contains('Discount Dumpster'))
                       AccountName ='Discount Dumpster Rental';

               ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
               if(mc.EnableTestAccount__c){
                        AccountIdval = mc.TestAccountID__c;
                        system.debug('accid is'+AccountIdval);
                    }else{
                        String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                        system.debug('account name list is--->'+AccountQuery);
                        AccountIdval = (Database.query(AccountQuery)).id;
                        system.debug('account name list is--->'+accountIdval);
                    } 
                 
             
             system.debug('lllllllllll'+[Select id, Name,Driver__c, Trip_Order__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c 
                from Dumpsters__c where Pdf_Parser_Delivery_Address__c=:DeliveryAddress and Status__c='Request for Pick-Up' and  Dumpster_Size__c=:DumpsterSize]);
                for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Fill_Details__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c 
                from Dumpsters__c where Pdf_Parser_Delivery_Address__c=:DeliveryAddress and Dumpster_Size__c=:DumpsterSize and (Status__c='Request for Pick-Up' or Status__c='Drop Off Complete') ]))
                {   
                    CheckRecord=True;
                    dumplist.add(dump);
                }   
                            system.debug(Dumplist);

            if(Dumplist.size()<2 && Dumplist.size()>0){
                        Dumpsters__c dumpster = new Dumpsters__c();

            for(Dumpsters__c dump : dumplist)
                        {
                            system.debug('dumpster value is'+dump);
                            dumpster=dump.clone(false,false);
                            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
                              {
                                  dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
                              }
                            dump.Driver__c = dump.Pick_Up_Driver__c; // Ticket 20893
                            dump.Status__c = 'Request for Pick-Up';
                            dump.Email_Success_helper__c = 'Request for Pick-Up';
                            //dump.PDF_From_Email__c = Label.Cleanup_Contractors_Success_Email;            //Ticket 20245
                            if(email.subject.containsIgnoreCase('- Swap'))
                                dump.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+DumpsterPickUpvisitDate[0]+'-'+DumpsterPickUpvisitDate[1]);
                            else
                                dump.Confirmed_Pick_Up_Date__c = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+MonthMap.get(DumpsterDropOffvisitDate[1])+'-'+DumpsterDropOffvisitDate[0]);   
                            
                        }
                        if(Dumplist.size() > 0)
                        {
                            update dumplist;
                            
                        }
            
            transition__c transition = new transition__c();
              transition.Html_body__c =StrResponse;
              transition.Account__c='Discount dumpster';
              transition.Email_subject__c = email.subject;
  insert transition;
          
                       
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=PoNumber;
                log.po_date__c=string.valueOf(DumpsterDropOffvisitDate);
                log.phone_number__c=PhoneNumber;
                    log.Comments__c=Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;   
    log.Account__c='Discount dumpster';
    log.Dumpster_content__c=ContactInfo;
   
    log.Type__c='New delivery';
    insert log;
            dumpster.AAccountccount__c              = AccountIdval;
            dumpster.Status__c                      = 'Unscheduled';
            //dumpster.DifferentDriverSameAddress__c  = TRUE;
            dumpster.Purchase_Order__c              = PoNumber;
             if(email.subject.containsIgnoreCase('- Swap'))
            {
                dumpster.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+DumpsterPickUpvisitDate[0]+'-'+DumpsterPickUpvisitDate[1]);
                dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+DumpsterDropOffvisitDate[0]+'-'+DumpsterDropOffvisitDate[1]);
            }
            else{
            dumpster.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+MonthMap.get(DumpsterPickUpvisitDate[1])+'-'+DumpsterPickUpvisitDate[0]);
            dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+MonthMap.get(DumpsterDropOffvisitDate[1])+'-'+DumpsterDropOffvisitDate[0]);
            }
            dumpster.Dumpster_Size__c               = DumpsterSize;
            dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
            //if(PhoneNumber.size()>0)
            dumpster.Phone_Number_2__c              = PhoneNumber.replace('<br>','');
            dumpster.Email_Success_helper__c        = AccountIdval;
            dumpster.PDF_From_Email__c              = Label.Discount_Dumpster_Rental_Success_Email;
            dumpster.Rental__c                      = 'Dumpster Rental';
            dumpster.Comments__c                    = Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','');
            
            //dumpster.X10_Days_Rental_Up_Date__c = system.now();
          /*  
            if(dumpster.Dumpster_Size__c == '40yd'){        //12804 we are using custom label 'Pdf parser Driver Assigner'
            dumpster.Driver__c = Label.X40ydDriver;  
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Driver__c = Label.X20ydDriver;
            }
            */
            if(dumpster.Dumpster_Size__c == '40yd'){
            dumpster.Driver__c = Label.X40ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Driver__c = Label.X30ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Driver__c = Label.X20ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
            }    
            
            Set<String> HoustonZipcodes = new Set<String>();
            integer Count; String trimmedZip ;
            String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
            String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
            HoustonZipcodes.addall(Zipcode1);
            HoustonZipcodes.addall(Zipcode2);
            for(String zip : HoustonZipcodes){
            trimmedZip = zip.trim();
            if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                Count= 1;
            }
            if(Count==1)
            {
                Dumpster.Houston_Helper__c = True; 
                Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                dumpster.Driver__c = label.HoustonDriver;
                 dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
            }
            
            
            insert dumpster;
             System.debug('<<<dumpster>>>'+dumpster);
            system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
            //Process of Email attachment creation
            Attachment EmlAttachment   = new Attachment();                           //12916
            EmlAttachment.Name         = email.Subject + '.eml';
            if(email.htmlBody != null)
            {
            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
            }
            else
            {
            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
            }
            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
            EmlAttachment.ParentId     = dumpster.Id;
            EmlAttachment.IsPrivate    = false;
            AttachmentList.add(EmlAttachment);
            
            
            //Process of Attachment creations
            if(AttachmentList.size()>0){
            system.debug('attachment list size '+attachmentlist.size());
            insert AttachmentList;
            }
            
            List<Id> DumpstersId = new List<Id>();
            for(Dumpsters__c DumpstersFor : dumplist)
            {
                DumpstersId.add(DumpstersFor.Id);
            }
            if(dumpster.Id != null)
                DumpstersId.add(dumpster.Id);
            if(DumpstersId.size() > 0)
            {
                send_Reply(DumpstersId, email); 
            }
            
            }
                    
                    else
                    {
                        SendingEmailMultipleDumpsterFound(Dumplist);
                    }
              if(!CheckRecord){
                 SendingMailNoRecord(DumpsterSize+'yd',DeliveryAddress,PoNumber);
                }
           
        }
        catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null); //14169
                
                
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e+String.valueOf(e.getStackTraceString().split('\n')));
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);  //12724    //14169
            }   
    }
    
    Public Static void DumpsterNewDelivery(String MailBody,Messaging.InboundEmail email )
    {
        
        string fromaddress;
        fromaddress = email.fromaddress;
        system.debug('From >>>'+fromaddress);
         Map<String,Integer> Month = new Map<String,Integer>
        {
            'jan' => 1,
            'feb' => 2,
            'mar' => 3,
            'apr' => 4,
            'may' => 5,
            'jun' => 6,
            'jul' => 7,
            'aug' => 8,
            'sep' => 9,
            'oct' => 10,
            'nov' => 11,
            'dec' => 12
        };
    
    
     try
        {
        List<string> DumpsterPickUpvisitDate = new List<String>();
        system.debug('======mailbody------>'+MailBody);
        MailBody = MailBody.replace('\n','<br>');
        MailBody = MailBody.replace('????','fi');
      MailBody = MailBody.replace('*','');
        System.debug('<<<>>>'+MailBody);
        MailBody.replace(' <','<');
    MailBody.replace('> ','>');
      MailBody.replace('|',''); 
    
    system.debug('--Mailbody---'+MailBody.replace('|',''));
     string temp;
      temp='';
    string FinalMailBody=''.replace('|','');
     system.debug('-Finalmailbody----'+FinalMailBody);
   
for(string str: MailBody.split('<br>'))
{
    system.debug('-----'+str);
    if(str!='' && str!= ' ' ){
        //system.debug('-----'+str);
    FinalMailBody=FinalMailBody+str+'<br>';
    system.debug('-Finalmailbody----'+FinalMailBody);
    }}
        
        system.debug('>>>>>>>Finalmailbody '+FinalMailBody.replace('|','<br>'));
        
        if(MailBody.contains('Discount Dumpster'))
        
                   AccountName ='Discount Dumpster Rental';
                   //transition.Account__c= 'Discount dumpster';
                  // insert transition;
                 
        ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
           if(mc.EnableTestAccount__c){
                    AccountIdval = mc.TestAccountID__c;
                    system.debug('accid is'+AccountIdval);
                }else{
                    String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                    system.debug('account name list is--->'+AccountQuery);
                    AccountIdval = (Database.query(AccountQuery)).id;
                    system.debug('account name list is--->'+accountIdval);
                } 
        
        String OrderNo;
        OrderNo = MailBody.SubstringAfter('PO Date').SubstringBefore('Delivery Address').SubstringAfter('<br><br><br>').SubstringBefore('<br><br>').trim();
        system.debug('>>OrderNO<< :'+OrderNo);
        
        String DeliveryAddress;
        string ContactInfo;
        String PhoneNumberhelper;
        String[] PhoneNumbers;
        String Phonenumber;
        String DeliveryDate;
        String FinalPickupDate;
        String ProductName;
        String PlacementInstruction;
        string[] dumpinformation;
        string commoninfo;
        system.debug('----Product name boolean value'+MailBody.SubstringAfter('Product Name').contains('Issue in Servicing'));
            system.debug('****Product name value'+MailBody.SubstringAfter('Product Name'));
            system.debug('FinalMailBody>>> '+FinalMailBody);
            
        if(fromaddress.contains('discountdumpsterco') || fromaddress.contains('yahoo'))
        {
           
           system.debug('<<in>>>>');
            
           if(email.subject.contains('- New Delivery'))
           {
               system.debug('- New>>');
               
               if(fromaddress.contains('yahoo'))
               {
                    system.debug('this is from yahoo----->');
                     OrderNo = MailBody.SubstringAfter('Order Number').SubstringAfter('PO Date').SubstringAfter('<br>').SubstringAfter('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').substringBefore('<br>').SubstringBefore('Product Name');
                   system.debug('>>>OrderNo --'+OrderNo);
                  OrderNo = OrderNo.replace('|','');
                   system.debug('>>>OrderNo '+OrderNo);
                   string[] spaceout = OrderNo.split(' ');
                   system.debug('spaceout'+spaceout);	
                OrderNo = spaceout[1]+spaceout[2];            
                system.debug('>>>OrderNo '+OrderNo);
               
               if(OrderNo ==null) //70107
                {
                    OrderNo = MailBody.SubstringAfter('Order Number').SubstringAfter('PO Date').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Product Name').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                    system.debug('>>>OrderNo <<'+OrderNo);
                }
                
                ProductName = FinalMailBody.SubstringAfter('Product Name').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').Substringbefore('New Delivery').Substringbefore('Dumpster').replace('<br>', ' ').trim();
                system.debug('>>ProductName<<--'+ProductName);
                if(ProductName.containsignorecase('yard'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yard').trim().right(2);
                }
                
                if(ProductName.containsignorecase('yd'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yd').trim().right(2);
                }
                 system.debug('>>ProductName<<-yyyd-'+ProductName);
                 
                
               PlacementInstruction = FinalMailBody.SubstringAfter('Placement Instructions').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                if(!PlacementInstruction.containsignorecase('place')) //70107
                {
                    PlacementInstruction = FinalMailBody.SubstringAfter('Placement Instructions').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                }
                system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
            
               string Address = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>>DeliveryAddress<<:'+Address);
                
                string addrs = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>addrs>>'+addrs);
            
                DeliveryAddress  = Address+' '+addrs;
                system.debug('>>DeliveryAddress<<:'+DeliveryAddress );
               
                if(DeliveryAddress.isAlpha()) //70107
                {
                    DeliveryAddress = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter(' Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                     system.debug('>>DeliveryAddress<<333 :'+DeliveryAddress);
                }
                ContactInfo = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>>ContactInfo<<:'+ContactInfo);
                
                string ContactInfo2 = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').SubstringBefore('<br>').replace('<br>', ' ').trim();            
                system.debug('>>ContactInfo<<:'+ContactInfo2);
                
                ContactInfo = ContactInfo+'\n'+ContactInfo2;
                system.debug('>>ContactInfo<<---:'+ContactInfo); 
                
                PhoneNumberhelper = FinalMailBody.SubstringAfter('Issue in Servicing').Substringafter('Should driver encounter a problem with service').Substringafter('please call our office at').Substringbefore('issues in a timely manner and avoid a dry run trip').Substringbefore('This will help resolve potential').trim();
                PhoneNumber = PhoneNumberhelper;
                system.debug('phone'+PhoneNumber);
                
                DeliveryDate = FinalMailBody.SubstringAfter('Delivery Date').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                
                if(DeliveryDate == null) //70107
                {
                    DeliveryDate = FinalMailBody.SubstringAfter('Delivery Date').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                }
                
                system.debug('DeliveryDate >>>'+DeliveryDate);
                DumpsterDropOffvisitDate = DeliveryDate.split('/');
                
                FinalPickupDate = FinalMailBody.SubstringAfter('Final Pickup Date').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                DumpsterPickUpvisitDate = FinalPickupDate.split('/');
                System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
               }
               else
               {
                 OrderNo = MailBody.SubstringAfter('Order Number').SubstringAfter('PO Date').substringBefore('Product Name').replace('<br>', ' ').trim();
                 system.debug('>>>OrderNo --'+OrderNo);
                 OrderNo = OrderNo.left(8);            
                 system.debug('>>>OrderNo '+OrderNo);
                 ProductName = MailBody.SubstringAfter('Product Name').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').substringBefore('Dumpster').Substringbefore('New Delivery').Substringbefore('Delivery Date').replace('<br>', ' ').trim();
                 system.debug('>>ProductName<<--'+ProductName);
                if(ProductName.containsignorecase('yard'))        
                {
                    ProductName = ProductName.tolowercase().substringbefore('yard').trim().right(2);
                }
                
                if(ProductName.containsignorecase('yd'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yd').trim().right(2);
                }
                 system.debug('>>ProductName<<-yyyd-'+ProductName);
                 PlacementInstruction = MailBody.SubstringAfter('Placement Instructions').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                if(!PlacementInstruction.containsignorecase('place')) //70107
                {
                    PlacementInstruction = MailBody.SubstringAfter('Placement Instructions').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                }
                 system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
                 string[] Address = MailBody.SubstringAfter('Delivery Address').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('Dumpster').SubstringAfter('<br>').SubstringBefore('Delivery Date').SubstringBefore('New Delivery').replace('<br><br>','<br>').trim().split('<br>');
                 system.debug('>>DeliveryAddress<<:'+Address);            
                 DeliveryAddress  = Address[0]+Address[1]+Address[2]+Address[3];
                 system.debug('>>DeliveryAddress<<:'+DeliveryAddress );
                 ContactInfo = Address[4]+'\n'+Address[5];
                 system.debug('>>ContactInfo<<:'+ContactInfo);             
                 PhoneNumberhelper = FinalMailBody.SubstringAfter('Issue in Servicing').Substringafter('Should driver encounter a problem with service').Substringafter('please call our office at').Substringbefore('issues in a timely manner and avoid a dry run trip').Substringbefore('This will help resolve potential').trim();
                 PhoneNumber = PhoneNumberhelper;
                 system.debug('phone'+PhoneNumber);
                 DeliveryDate = MailBody.SubstringAfter('Delivery Date').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();         
                 system.debug('DeliveryDate >>>'+DeliveryDate);
                 string[] DumpsterDropOffvisitDate = DeliveryDate.split('/');
                 system.debug('DeliveryDate------>>>'+DumpsterDropOffvisitDate); 
                 FinalPickupDate = MailBody.SubstringAfter('Final Pickup Date').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                 System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
                 DumpsterPickUpvisitDate = FinalPickupDate.split('/');
                 System.debug('>>FinalPickUpDate-----<<:'+DumpsterPickUpvisitDate);
               }                          
           }
           else
           {
               system.debug('|New>>');
               
                OrderNo = MailBody.SubstringAfter('Purchase Order |').SubstringBefore('Order Type').replace('<br>', ' ').trim();
                 system.debug('>>>OrderNo 11'+OrderNo);
                OrderNo = OrderNo.left(8);            
                
                system.debug('>>>OrderNo '+OrderNo);
                
                
                ProductName = FinalMailBody.SubstringAfter('Product Name').SubstringAfter('New Delivery').Substringbefore('Delivery Address').Substringbefore('Dumpster').replace('<br>', ' ').trim();
                system.debug('>>ProductName<<--'+ProductName);
                if(ProductName.containsignorecase('yard'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yard').trim().right(2);
                }
                
                if(ProductName.containsignorecase('yd'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yd').trim().right(2);
                }
                
               
              
                
                PlacementInstruction = FinalMailBody.SubstringAfter('Placement Information').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
                if(fromaddress.contains('yahoo'))
                {
                    system.debug('this is from yahoo----->');
                   string Address = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('place in single driveway').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>>DeliveryAddress<<:'+Address);
                
                string addrs = FinalMailBody.SubstringAfter('Delivery Address').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('place in single driveway').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>addrs>>'+addrs);
               
                
                DeliveryAddress = Address+','+' '+addrs;
                system.debug('>>DeliveryAddress<<222:'+DeliveryAddress); 
                     ContactInfo = FinalMailBody.SubstringAfter('Contact Information').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                system.debug('>>ContactInfo<<:'+ContactInfo);
                
                string ContactInfo2 = FinalMailBody.SubstringAfter('Contact Information').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Issue in Servicing').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();            
                system.debug('>>ContactInfo<<:'+ContactInfo2);
                
                ContactInfo = ContactInfo+'\n'+ContactInfo2;
                system.debug('>>ContactInfo<<---:'+ContactInfo);
                
                
                PhoneNumberhelper = FinalMailBody.SubstringAfter('Issue in Servicing').Substringafter('Please call our office at ').Substringbefore('Should the driver encounter a problem with service').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                PhoneNumber = PhoneNumberhelper;
                }
               else{
             if(FinalMailBody.SubstringAfter('Placement Dimensions<br>').SubstringBefore('Issue in Servicing').contains('Dumpster Contents'))
                    commoninfo = FinalMailBody.SubstringAfter('Dumpster Contents<br>').SubstringBefore('Issue in Servicing');            
    
                else                     
                  commoninfo = FinalMailBody.SubstringAfter('Placement Dimensions<br>').SubstringBefore('Issue in Servicing');            
               
                system.debug('<<< commoninfo 1>>>'+commoninfo );
               dumpinformation=commoninfo.split('<br>');
                system.debug('<<< dumpinformation 1>>>'+dumpinformation);
               if(dumpinformation.size()>=4)
               {
                   DeliveryAddress = dumpinformation[0].trim()+','+dumpinformation[1].trim();
                    system.debug('>>DeliveryAddress<<:'+DeliveryAddress);
                     ContactInfo = dumpinformation[2].trim();
                system.debug('>>ContactInfo<<:'+ContactInfo);
                     Phonenumber = dumpinformation[3].trim();
                system.debug('>>Phonenumber<<:'+Phonenumber);
                contactinfo = contactinfo +' '+Phonenumber;
                    system.debug('>>ContactInfo<<---:'+ContactInfo);
                placementInstruction = dumpinformation[4].replace('<br>', ' ').trim();
                system.debug('>>PlacementInstruction<<:'+placementInstruction);
               }
               }
               
              
              //  if(PhoneNumbers.size()>0)    Phonenumber = PhoneNumbers[PhoneNumbers.size() - 1];
                system.debug('phone'+PhoneNumber);
                
                DeliveryDate = FinalMailBody.SubstringAfter('Delivery Date').SubstringAfter('New Delivery').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Address').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('00:00:00').trim();
                system.debug('DeliveryDate >>>'+DeliveryDate);
                DumpsterDropOffvisitDate = DeliveryDate.replace(',','').split(' ');
                System.debug('>>DumpsterDropOffvisitDate<<:'+DumpsterDropOffvisitDate);
                        
                        for(String Monthkey : Month.keyset()){
                        if(DeliveryDate.tolowercase().contains(Monthkey))
                        {
                            system.debug('qwertyu.........'+Month.get(Monthkey));
                            DumpsterDropOffvisitDate[0] = String.valueof(Month.get(Monthkey));
                        }
                        }
                        System.debug('>>DumpsterDropOffvisitDate<<:'+DumpsterDropOffvisitDate);
                
                FinalPickupDate = FinalMailBody.SubstringAfter('Pick Up Date').SubstringAfter('New Delivery').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('Delivery Address').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('<br>').SubstringBefore('00:00:00').trim();
                DumpsterPickUpvisitDate = FinalPickupDate.replace(',','').split(' ');
                System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
               for(String Monthkey : Month.keyset()){
                        if(FinalPickupDate.tolowercase().contains(Monthkey))
                        {
                            system.debug('qwertyu.........'+Month.get(Monthkey));
                            DumpsterPickUpvisitDate[0] = String.valueof(Month.get(Monthkey));
                        }
                        }
                       
                        System.debug('>>FinalPickUpDate<<:'+DumpsterPickUpvisitDate);
                
                
           } 
    
        }
        else
        {
            
             system.debug('<<not>>>>');
            if(MailBody.Substringbefore('Product Name').contains('Order Type'))
            {
               
               
               OrderNo = MailBody.SubstringAfter('Purchase Order |').SubstringBefore('Order Type').replace('<br>', ' ').trim();
               system.debug('>>1111<< :'+MailBody.SubstringAfter('Purchase Order &#124;').SubstringBefore('Order Type'));
               system.debug(MailBody.SubstringAfter('Placement Dimensions<br><br><br>').SubstringBefore('Issue in Servicing')+'>>OrderNO<< :'+OrderNo);
                 
                if(FinalMailBody.SubstringAfter('Placement Dimensions<br>').SubstringBefore('Issue in Servicing').contains('Dumpster Contents'))
                    commoninfo = FinalMailBody.SubstringAfter('Dumpster Contents<br>').SubstringBefore('Issue in Servicing');            
    
                else                     
                  commoninfo = FinalMailBody.SubstringAfter('Placement Dimensions<br>').SubstringBefore('Issue in Servicing');            
               
                system.debug('<<< commoninfo 1>>>'+commoninfo );
                
                dumpinformation=commoninfo.split('<br>');
                system.debug('<<< dumpinformation 1>>>'+dumpinformation);
                if(dumpinformation.size()>=4){
                DeliveryAddress = dumpinformation[0].trim()+', '+dumpinformation[1].trim();
                system.debug('>>DeliveryAddress<<:'+DeliveryAddress);
                
                ContactInfo = dumpinformation[2].trim();
                system.debug('>>ContactInfo<<:'+ContactInfo);
                Phonenumber = dumpinformation[3].trim();
                system.debug('>>Phonenumber<<:'+Phonenumber);
                contactinfo = contactinfo +' '+Phonenumber;
                placementInstruction = dumpinformation[4].replace('<br>', ' ').trim();
                system.debug('>>PlacementInstruction<<:'+placementInstruction);
                }
                dumpinformation.clear();
                commoninfo = '';
    
                commoninfo = FinalMailBody.SubstringAfter('Pick Up Date<br>').SubstringBefore('<br>Delivery Address');//.SubstringAfter('<br>').SubstringBefore('<br>').SubstringBefore('<br>').trim();
                
                dumpinformation=commoninfo.split('<br>');
                
                 system.debug('<<< commoninfo 2>>>'+commoninfo );
                  system.debug('<<< dumpinformation 2>>>'+dumpinformation );
                
                if(dumpinformation.size()>=3){
                    if(dumpinformation[2].contains('/')){
                        DumpsterDropOffvisitDate = dumpinformation[2].SubstringBefore(' ').split('/');
                        System.debug('>>DumpsterDropOffvisitDate<<:'+DumpsterDropOffvisitDate);
                
                
                        DumpsterPickUpvisitDate = dumpinformation[3].SubstringBefore(' ').split('/');
                        System.debug('>>FinalPickUpDate<<:'+DumpsterPickUpvisitDate);
                    }
                    else{
                        String Fulldate = dumpinformation[2];
                        DumpsterDropOffvisitDate = dumpinformation[2].replace(',','').split(' ');
                        System.debug('>>DumpsterDropOffvisitDate<<:'+DumpsterDropOffvisitDate);
                        
                        for(String Monthkey : Month.keyset()){
                        if(Fulldate.tolowercase().contains(Monthkey))
                        {
                            system.debug('qwertyu.........'+Month.get(Monthkey));
                            DumpsterDropOffvisitDate[0] = String.valueof(Month.get(Monthkey));
                        }
                        }
                        System.debug('>>DumpsterDropOffvisitDate<<:'+DumpsterDropOffvisitDate);
                        Fulldate = dumpinformation[3];
                        DumpsterPickUpvisitDate = dumpinformation[3].replace(',','').split(' ');
                        System.debug('>>FinalPickUpDate<<:'+DumpsterPickUpvisitDate);
                        for(String Monthkey : Month.keyset()){
                        if(Fulldate.tolowercase().contains(Monthkey))
                        {
                            system.debug('qwertyu.........'+Month.get(Monthkey));
                            DumpsterPickUpvisitDate[0] = String.valueof(Month.get(Monthkey));
                        }
                        }
                       
                        System.debug('>>FinalPickUpDate<<:'+DumpsterPickUpvisitDate);
                
                    }
               
                
                system.debug('<<< dumpinformation [1]>>>'+dumpinformation[1] );
                ProductName = dumpinformation[1].trim();
                system.debug('>>ProductName<<:'+ProductName);
                if(ProductName.containsignorecase('yard'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yard').trim();
                }
                    
                if(ProductName.containsignorecase('yd'))
                {
                    ProductName = ProductName.tolowercase().substringbefore('yd').trim();
                }
                
                    system.debug('>>ProductName<<2 :'+ProductName);
                }
                
               string dumpsize ='';
               dumpsize = FinalMailBody.SubstringAfter('New Delivery').SubstringBefore('Dumpster');
               system.debug('dumpsize >> '+dumpsize);
                
            }
            else
            {
                if(email.plainTextBody != null && email.HtmlBody == null)
                {
                                
                    ProductName = FinalMailBody.SubstringAfter('Product Name').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringBefore('<br>').trim();
                    system.debug('>>ProductName<<:'+ProductName);
                    if(ProductName.containsignorecase('yard'))
                    {
                        ProductName = ProductName.tolowercase().substringbefore('yard').trim();
                    }
                    
                    if(ProductName.containsignorecase('yd'))
                    {
                        ProductName = ProductName.tolowercase().substringbefore('yd').trim();
                    }
                    DeliveryAddress = FinalMailBody.SubstringAfter('Product Name').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                    system.debug('>>DeliveryAddress<<:'+DeliveryAddress);
                    
                    ContactInfo = FinalMailBody.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('<br>').replace('<br>', ' ').trim();
                    system.debug('>>ContactInfo<<:'+ContactInfo);
                    
                    PhoneNumberhelper = FinalMailBody.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('<br>').trim();
                    PhoneNumbers = PhoneNumberhelper.split('<br>');
                    if(PhoneNumbers.size()>0)    Phonenumber = PhoneNumbers[PhoneNumbers.size() - 1];
                    
                    DeliveryDate = FinalMailBody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('<br>').SubstringBefore('<br>').trim();
                    System.debug('>>DeliveryDate<<:'+DeliveryDate);
                    DumpsterDropOffvisitDate = DeliveryDate.split('/');
                    
                    FinalPickupDate = FinalMailBody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('<br>').trim();
                    DumpsterPickUpvisitDate = FinalPickupDate.split('/');
                    System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
                    
                    PlacementInstruction = FinalMailBody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('Dumpster Contents').SubstringAfter('<br>').SubstringAfter('<br>').SubstringAfter('<br>').SubstringBefore('<br>').trim();
                    system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
                }
                else
                {
                    OrderNo = email.htmlbody.SubstringAfter('PO Date').SubstringBefore('Delivery Address').SubstringAfter('<tr>').substringAfter('<td').substringAfter('>').substringBefore('</td>').stripHtmlTags().trim();
                    system.debug('>>OrderNO<< :'+OrderNo);
                    
                    ProductName = email.htmlbody.SubstringAfter('Product Name').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<tr>').substringAfter('<td').substringAfter('>').substringBefore('</td>').stripHtmlTags().trim();
                    system.debug('>>ProductName<<:'+ProductName);
                    
                    if(ProductName.containsignorecase('yard'))
                    {
                        ProductName = ProductName.tolowercase().substringbefore('yard').trim();
                    }
                    
                    if(ProductName.containsignorecase('yd'))
                    {
                        ProductName = ProductName.tolowercase().substringbefore('yd').trim();
                    }
                    
                    DeliveryAddress = email.htmlbody.SubstringAfter('Product Name').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<tr>').substringAfter('<td').substringAfter('<td').substringAfter('>').substringBefore('</td>').stripHtmlTags().replace('\n', ' ').trim();
                    system.debug('>>DeliveryAddress<<:'+DeliveryAddress);
                    
                    ContactInfo = email.htmlbody.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<tr>').substringAfter('<td').SubstringAfter('<td').SubstringAfter('<td').substringAfter('>').SubstringBefore('</td>').stripHtmlTags().replace('\n', ' ').trim();
                    system.debug('>>ContactInfo<<:'+ContactInfo);
                    
                    PhoneNumberhelper = email.htmlbody.SubstringAfter('Contact Information').SubstringBefore('Delivery Date').SubstringAfter('Action Type').SubstringAfter('<tr>').substringAfter('<td').SubstringAfter('<td').SubstringAfter('<td').substringAfter('>').SubstringBefore('</td>').stripHtmlTags().replace('\n', '<br>').trim();
                    PhoneNumbers = PhoneNumberhelper.split('<br>');
                    if(PhoneNumbers.size()>0)    Phonenumber = PhoneNumbers[PhoneNumbers.size() - 1];
                    
                    DeliveryDate = email.htmlbody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('<tr>').substringAfter('<td').substringAfter('>').SubstringBefore('</td>').stripHtmlTags().trim();
                    system.debug(DeliveryDate);
                    DumpsterDropOffvisitDate = DeliveryDate.split('/');
                    
                    FinalPickupDate = email.htmlbody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('<tr>').SubstringAfter('<td').SubstringAfter('<td').substringAfter('>').SubstringBefore('</td>').stripHtmlTags().trim();
                    DumpsterPickUpvisitDate = FinalPickupDate.split('/');
                    System.debug('>>FinalPickUpDate<<:'+FinalPickupDate);
                    
                    PlacementInstruction = email.htmlbody.SubstringAfter('Delivery Date').SubstringBefore('Issue in Servicing').SubstringAfter('<tr>').SubstringAfter('<td').SubstringAfter('<td').SubstringAfter('<td').substringAfter('>').SubstringBefore('</td>').stripHtmlTags().trim();
                    system.debug('>>PlacementInstruction<<:'+PlacementInstruction);
                }
            }
            
        }
             transition__c transition = new transition__c();
                  transition.Html_body__c =MailBody;
                  transition.Account__c='Discount dumpster';
                  transition.Email_subject__c = email.subject;
        insert transition;
             
                            log__c log= new log__c();
                    log.Transition__c  = transition.id;
                    log.Po_number__c=OrderNo;
                    log.po_date__c= string.valueOf(DumpsterPickUpvisitDate);
                    log.phone_number__c=PhoneNumber;
                        log.Comments__c=Label.Update_Comments_Field +'\n\n' + ContactInfo.replace('<br>','') +'\n\n' + PlacementInstruction.replace('<br>','');
        
                    log.Delivery_adddtess__c =DeliveryAddress;
                    log.Dumpster_size__c=ProductName;   
        log.Account__c='Discount dumpster';
        log.Dumpster_content__c=ContactInfo;
        
        log.Placement_instruction__c=PlacementInstruction;
        log.Type__c='New delivery';
        
                    
                                    insert log;
        

            Dumpsters__c dumpster = new Dumpsters__c();
            dumpster.AAccountccount__c              = AccountIdval;
            dumpster.Status__c                      = 'Unscheduled';
            //dumpster.DifferentDriverSameAddress__c  = TRUE;
            dumpster.Purchase_Order__c              = OrderNo;
            if(DumpsterPickUpvisitDate.size()==3)
            {
                dumpster.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterPickUpvisitDate[2]+'-'+DumpsterPickUpvisitDate[0]+'-'+DumpsterPickUpvisitDate[1]);
            }
            if(DumpsterDropOffvisitDate.size()==3)
            {
                dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDropOffvisitDate[2]+'-'+DumpsterDropOffvisitDate[0]+'-'+DumpsterDropOffvisitDate[1]);
            }
            
            if(ProductName!=null) //58916
            {
            dumpster.Dumpster_Size__c               = ProductName+'yd';
            }
            else
            {
            string size = FinalMailBody.SubstringAfter('Pick Up Date<br>').SubstringBefore('<br>Delivery Address').SubstringAfter('New Delivery').SubstringAfter('<br>').substringBefore('Yard Dumpster').trim();
            dumpster.Dumpster_Size__c = size+'yd';
            }
            system.debug('>>>> dumpster.Dumpster_Size__c '+dumpster.Dumpster_Size__c);
            dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress;
            dumpster.Phone_Number_2__c              = PhoneNumber;
            dumpster.Email_Success_helper__c        = AccountIdval;
            dumpster.Rental__c                      = 'Dumpster Rental';
            dumpster.Comments__c  = Label.Update_Comments_Field +'\n\n' + ContactInfo.replace('<br>','') +'\n\n' + PlacementInstruction.replace('<br>','');
            
          /*  if(ContactInfo!=null) 
            dumpster.Comments__c                    = dumpster.Comments__c +'\n\n'+ ContactInfo.replace('<br>','');
            if(PlacementInstruction!=null)
            dumpster.Comments__c = dumpster.Comments__c + '\n\n' + PlacementInstruction.replace('<br>','');
            
            //dumpster.Comments__c  = Label.Update_Comments_Field +'\n\n' + ContactInfo.replace('<br>','') +'\n\n' + PlacementInstruction.replace('<br>','');*/
            
                system.debug('dumpster.Comments__c ><>><'+dumpster.Comments__c );
            
            if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dumpster.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
            
            if(dumpster.Dumpster_Size__c == '40yd'){
            dumpster.Driver__c = Label.X40ydDriver;  
            dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '30yd'){
            dumpster.Driver__c = Label.X30ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
            }
            else if(dumpster.Dumpster_Size__c == '20yd'){
            dumpster.Driver__c = Label.X20ydDriver;
            dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
            }
            
            Set<String> HoustonZipcodes = new Set<String>();
            integer Count; String trimmedZip ;
            String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
            String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
            HoustonZipcodes.addall(Zipcode1);
            HoustonZipcodes.addall(Zipcode2);
            for(String zip : HoustonZipcodes){
            trimmedZip = zip.trim();
            system.debug('DeliveryAddress???? '+DeliveryAddress);
            system.debug('trimmedZip ???? '+trimmedZip );
            if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                Count= 1;
            }
            if(Count==1)
            {
                Dumpster.Houston_Helper__c = True; 
                Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                dumpster.Driver__c = label.HoustonDriver;
                dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
            }
            
            insert dumpster;
            
            System.debug('<<<dumpster>>>'+dumpster);
            system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
            //Process of Email attachment creation
            Attachment EmlAttachment   = new Attachment();
            EmlAttachment.Name         = email.Subject + '.eml';
            if(email.htmlBody != null)
            {
            EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
            }
            else
            {
            EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
            }
            EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
            EmlAttachment.ParentId     = dumpster.Id;
            EmlAttachment.IsPrivate    = false;
            AttachmentList.add(EmlAttachment);
            
           
            //Process of Attachment creations
            if(AttachmentList.size()>0){
            system.debug('attachment list size '+attachmentlist.size());
            insert AttachmentList;
            }
            
            List<Id> DumpstersId = new List<Id>();
            if(dumpster.Id != null)
                DumpstersId.add(dumpster.id);
            if(DumpstersId.size() > 0)
            {
                send_Reply(DumpstersId, email); 
            }
           
        
        }
        catch(DMLException e){ //Handling exception here
               
                
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null); //14169
                
            }
            catch(Exception e){ //Handling exception here
             
             
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);  //12724    //14169
            }   
        
    }
    
  /*==================================Ticket No: 60964=======================================================
    *Method Name     : public static void BargainDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email)
    *Description     : Parsing PDF and Create the Dumpster;
    *Arguments       : BargainDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email)
    ===========================================================================================================   
     Public Static Void BargainDumpsterRecord(String strResponse ,String file_name,Blob file_body,Messaging.InboundEmail email) //60964
     {
    
     }
    */
      /*==================================Ticket No: 62009=======================================================
    *Method Name     : public static void BargainDumpster_insert(String strResponse, Messaging.InboundEmail email)
    *Description     : Parsing PDF and Create the Dumpster;
    *Arguments       : BargainDumpster_insert(String strResponse , Messaging.InboundEmail email)
    ===========================================================================================================*/   
  Public Static Void BargainDumpster_insert(String strResponse , Messaging.InboundEmail email) //62009
    {
        system.debug('strResponse bargain >>>'+strResponse);
        
         List<string> DumpsterDate = new List<String>();
        
        String PoNumber;  
         String DeliveryAddress;
              String AccountParse;
              string ContactInfo;
              string PhoneNumber;
            
              String DumpsterSize;
              string placementins;
             
              String Comments;
              string[] splitdate;
        
        
        try
        {    
           
         if(((email.plainTextBody != null || email.plainTextBody != '')&& email.plainTextBody.containsIgnoreCase('Bargain Dumpster') && email.subject.containsIgnoreCase('NEW'))||((email.htmlbody != null || email.htmlbody != '')&& email.htmlbody .containsIgnoreCase('Bargain Dumpster') && email.subject.containsIgnoreCase('NEW'))) //63028           
         {
           
                 strResponse = strResponse.replace('\n','<br>').replace('*','<br>').replace('?','<br>');
                 strResponse = strResponse.replace('??','fi').replace('?','<br>');
                strResponse= strResponse.replace('|','');
                 system.debug('strResponse Upsert bargain >sort>>'+strResponse);
                 
                  PoNumber = strResponse.SubstringAfter('P.O. NO.').SubstringBefore('Haulbrooke - Houston, TX').trim();      
                  system.debug('PoNumber >>> '+PoNumber );
                  
                 string Addresses = strResponse.SubstringAfter('VENDOR').SubstringAfter('P.O. NO.').SubstringAfter('Haulbrooke - Houston, TX').SubstringBefore('DATE').trim();     
                   system.debug('Address  >>'+Addresses );
                
                      string Address =Addresses.replace('<br><br>',' ');
                  Address = Address.SubstringAfter('<br>').trim();
                DeliveryAddress = Address.replace('<br>',' ');
                  system.debug('DeliveryAddAddresress >>'+DeliveryAddress );
                  
                  string dumpsize = strResponse.SubstringAfter('AMOUNT').SubstringBefore('ESTIMATED TOTAL CHARGES:').trim(); //62972
                  if(dumpsize.containsignorecase('yd')) 
                  {
                      dumpsize = dumpsize.SubstringBefore('yd').right(2);
                  }
                  system.debug('dumpsize >>'+dumpsize );
                  DumpsterSize  = dumpsize +'yd';
                  
                  system.debug('DumpsterSize >>>>'+DumpsterSize );
                  
                 // string DeliveryDate = strResponse.SubstringAfter('Delivery Date').SubstringAfter('SWAP').SubstringAfter('<br><br>').SubstringBefore('ACTIVITY').Substringbefore('<br><br><br>').Substringbefore('<br><br>').trim();
                    string Datee = strResponse.SubstringAfter('Delivery Date').SubstringBefore('ACTIVITY').trim();
                    system.debug('------------>'+Datee);
             		splitdate=Datee.replaceAll(' ','').split('<br><br><br>');
             		system.debug('------------>'+splitdate);
             		system.debug('------------>'+Datee.replaceAll(' ',''));
                           string DeliveryDate; 
             
                    if(Datee.contains('<br>'))
                    {
                        DeliveryDate = Datee.replace('<br>','');
                        system.debug('----->'+DeliveryDate);
                        DeliveryDate=splitdate[1].right(10).replaceAll(' ','');
                        system.debug('----->'+DeliveryDate+'4545');
                        system.debug('----->'+splitdate);
                        system.debug('----->'+DeliveryDate);
                      
                    }
                    System.debug('>>DeliveryDate<<:'+DeliveryDate);
                    DumpsterDate = DeliveryDate.split('/');
                  string no =  strResponse.SubstringAfter('Onsite Phone#:').Substringbefore('Placement').trim();  
             system.debug('------>>>>>>>>>>> '+strResponse.SubstringAfter('Onsite Phone#:').Substringbefore('Placement').trim());     
             PhoneNumber = no.replace('<br>',' ');
                  system.debug('Phone > '+PhoneNumber);
                  
                  placementins = StrResponse.SubstringAfter('Placement instructions:').SubstringBefore('Bargain Dumpster').trim();
                  system.debug('placementins >>'+placementins );
                  
                 Comments = StrResponse.SubstringAfter('Onsite contact name:').SubstringBefore('Onsite Phone#:').trim();
                system.debug('Com>> '+Comments);

                  
                  
            
            }
        
        
             if(strResponse.contains('Bargain Dumpster'))
             {
                       AccountParse ='Bargain Dumpster';
             }
        
             if(AccountParse.contains('Bargain Dumpster'))
             {
                   AccountName ='Bargain Dumpster';
             }
              
                       ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
               if(mc.EnableTestAccount__c){
                        AccountIdval = mc.TestAccountID__c;
                        system.debug('accid is'+AccountIdval);
                    }else{
                        String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                        system.debug('account name list is--->'+AccountQuery);
                        AccountIdval = (Database.query(AccountQuery)).id;
                        system.debug('account name list is--->'+accountIdval);
                    } 
                     transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c= 'Bargain dumpster';
            transition.Email_subject__c = email.subject;
              insert transition;
              
  
     
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=PoNumber.replace('<br>','');
              
                             log.po_date__c= string.valueOf(DumpsterDate);

                log.phone_number__c=PhoneNumber;
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize;  
                log.Comments__c=Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','')+'\n\n'+PhoneNumber.replace('<br>','')+'\n\n'+placementins.replace('<br>',''); 
    log.Account__c='Bargain dumpster';
   
    log.Final_pickup_date__c='null';
   
    log.Placement_instruction__c=placementins;
    log.Type__c='New delivery -Bargain';
                insert log;

              
               Dumpsters__c dumpster = new Dumpsters__c();

                dumpster.AAccountccount__c              = AccountIdval;
                dumpster.Status__c                      = 'Unscheduled';
                dumpster.Purchase_Order__c              = PoNumber.replace('<br>','');
                dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDate[2].trim()+'-'+DumpsterDate[0].trim()+'-'+DumpsterDate[1].trim());
                System.debug('dumpster.Drop_Off_Visit_Date__c'+dumpster.Drop_Off_Visit_Date__c);    
                dumpster.Dumpster_Size__c               = DumpsterSize;
                dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
                system.debug('address------->'+dumpster.Pdf_Parser_Delivery_Address__c);
                dumpster.Phone_Number_2__c              = PhoneNumber.replace('<br>','');
                System.debug('dumpster.Phone_Number_2__c '+dumpster.Phone_Number_2__c );
                dumpster.Email_Success_helper__c        = AccountIdval;
                dumpster.Rental__c                      = 'Dumpster Rental';
                dumpster.Comments__c                    = Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','')+'\n\n'+PhoneNumber.replace('<br>','')+'\n\n'+placementins.replace('<br>','');

               
                if(dumpster.Dumpster_Size__c == '40yd'){
                dumpster.Driver__c = Label.X40ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '30yd'){
                dumpster.Driver__c = Label.X30ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '20yd'){
                dumpster.Driver__c = Label.X20ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                }    
                
                Set<String> HoustonZipcodes = new Set<String>();
                integer Count; String trimmedZip ;
                String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                HoustonZipcodes.addall(Zipcode1);
                HoustonZipcodes.addall(Zipcode2);
                for(String zip : HoustonZipcodes){
                trimmedZip = zip.trim();
                if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                    Count= 1;
                }
                if(Count==1)
                {
                    Dumpster.Houston_Helper__c = True; 
                    Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                    dumpster.Driver__c = label.HoustonDriver;
                    dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                }
                
                
                insert dumpster;
                 System.debug('<<<dumpster>>>'+dumpster);
                system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
                
                Attachment EmlAttachment   = new Attachment();                          
                EmlAttachment.Name         = email.Subject + '.eml';
                if(email.htmlBody != null)
                {
                EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                }
                else
                {
                EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                }
                EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                EmlAttachment.ParentId     = dumpster.Id;
                EmlAttachment.IsPrivate    = false;
                AttachmentList.add(EmlAttachment);
                
                
                //Process of Attachment creations
                if(AttachmentList.size()>0){
                system.debug('attachment list size '+attachmentlist.size());
                insert AttachmentList;
                }
                
                List<Id> DumpstersId = new List<Id>();
                
                if(dumpster.Id != null)
                    DumpstersId.add(dumpster.Id);
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email); 
                }
                  
        }
        catch(DMLException e){ //Handling exception here
                
                Error_log__c Errorlog = new Error_log__c();
             Errorlog.Message_content__c =  strResponse;
             Errorlog.ExceptionMessage__c =String.valueOf(e.getStackTraceString().split('\n'));
            Errorlog.Class_name__c = 'ParsingHandler';
           insert Errorlog;
                
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null); //14169
                
            }
            catch(Exception e){ //Handling exception here
             
             Error_log__c Errorlog = new Error_log__c();
             Errorlog.Message_content__c =  strResponse ;
             Errorlog.ExceptionMessage__c =String.valueOf(e.getStackTraceString().split('\n'));
            Errorlog.Class_name__c = 'ParsingHandler';

           insert Errorlog;
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);  //12724    //14169
            }   
        
    }
        
        
        
        
    
     
    /*================================== Ticket No: 61711=======================================================
    *Method Name     : Upsert_Bargain_Dumpster
    *Description     : Parsing PDF and create and update the Dumpster Record for Bargain Dumpster Account
    *Arguments       : Upsert_Bargain_Dumpster(String strResponse,Messaging.InboundEmail email)
    ===========================================================================================================*/
    
    public void Upsert_Bargain_Dumpster(String strResponse,Messaging.InboundEmail email) //61711
    {
        system.debug('strResponse Upsert bargain >>>'+strResponse);
        
          List<string> DumpsterDate = new List<String>();
        List<Dumpsters__c> dumplist = new List<Dumpsters__c>();
        Boolean CheckRecord=false;
        String PoNumber;  
         String DeliveryAddress;
              String AccountParse;
              string ContactInfo;
              string PhoneNumber;
              string PhoneNumberhelper;
              string[] PhoneNumbers;
              String DumpsterSize;
              string placementins;
              Map<String,Integer> MonthMap = new Map<string,Integer>(); 
              String Comments;
        
        try
        {    
            if((email.subject.containsIgnoreCase('PO#') && email.subject.containsIgnoreCase('SWAP')))//61711
            {
                 strResponse = strResponse.replace('\n','<br>');
                 strResponse = strResponse.replace('??','fi');
                 strResponse= strResponse.replace('|','');
                 system.debug('strResponse Upsert bargain >sort>>'+strResponse);
                 
                  PoNumber = strResponse.SubstringAfter('PO#').SubstringBefore('SWAP').trim();      
                  system.debug('PoNumber >>> '+PoNumber );
                  
                 string Addresses = strResponse.SubstringAfter('VENDOR').SubstringAfter('P.O. NO.').SubstringAfter('Haulbrooke - Houston, TX').SubstringBefore('DATE').trim();     
                   system.debug('Address  >>'+Addresses );
                
                      string Address =Addresses.replace('<br><br>',' ');
                  Address = Address.SubstringAfter('<br>').trim();
                DeliveryAddress = Address.replace('<br>',' ');
                  system.debug('DeliveryAddAddresress >>'+DeliveryAddress );
                  
                  string dumpsize = strResponse.SubstringAfter('PO#').SubstringAfter('SWAP').SubstringBefore('@').trim();  
                  system.debug('dumpsize >>'+dumpsize );
                  DumpsterSize  = dumpsize.left(2)+'yd';
                  
                  system.debug('DumpsterSize >>>>'+DumpsterSize );
                  
                 // string DeliveryDate = strResponse.SubstringAfter('Delivery Date').SubstringAfter('SWAP').SubstringAfter('<br><br>').SubstringBefore('ACTIVITY').Substringbefore('<br><br><br>').Substringbefore('<br><br>').trim();
                    string Datee = strResponse.SubstringAfter('Delivery Date').SubstringAfter('SWAP').SubstringBefore('ACTIVITY').trim();
                           string DeliveryDate;                     
                    if(Datee.contains('<br>'))
                    {
                        DeliveryDate = Datee.replace('<br>',' ').trim();
                    }
                    System.debug('>>DeliveryDate<<:'+DeliveryDate);
                    DumpsterDate = DeliveryDate.split('/');
                  string no =  strResponse.SubstringAfter('Onsite Phone#:').Substringbefore('Placement instructions:').trim();  
                  PhoneNumber = no.replace('<br>',' ');
                  system.debug('Phone > '+PhoneNumber);
                  
                  placementins = StrResponse.SubstringAfter('Placement instructions:').SubstringBefore('Bargain Dumpster').trim();
                  system.debug('placementins >>'+placementins );
                  
                 Comments = StrResponse.SubstringAfter('Onsite contact name:').SubstringBefore('Onsite Phone#:').trim();
                system.debug('Com>> '+Comments);

                  
                  
            
            }
        
        
             if(strResponse.contains('Bargain Dumpster'))
             {
                       AccountParse ='Bargain Dumpster';
             }
        
             if(AccountParse.contains('Bargain Dumpster'))
             {
                   AccountName ='Bargain Dumpster';
             }
              
                       ParserPDFTestAccount__c mc = ParserPDFTestAccount__c.getInstance('PDFTestAccount');
               if(mc.EnableTestAccount__c){
                        AccountIdval = mc.TestAccountID__c;
                        system.debug('accid is'+AccountIdval);
                    }else{
                        String AccountQuery = 'select id,name from account where name like \'%' + AccountName +'%\' limit 1';
                        system.debug('account name list is--->'+AccountQuery);
                        AccountIdval = (Database.query(AccountQuery)).id;
                        system.debug('account name list is--->'+accountIdval);
                    } 
              
              
              
              
              for(Dumpsters__c dump : ([Select id, Name,Driver__c, Trip_Order__c, AAccountccount__c,Pick_Up_Driver__c,Pdf_Parser_Delivery_Address__c,Status__c,Comments__c,Phone_Number_2__c,Phone_Number_22__c,Delivery_Street__c,Delivery_Street2__c,Delivery_City__c,Delivery_State_Province__c,Delivery_Zip__c,Estimated_GP__c,Rental__c,Confirmed_Pick_Up_Time__c,Dumpster_Size__c,Recurring__c,Proposal_Lost_Reason__c,Delivery_Address__c,Concrete_Only__c,Dumpster_Rental_price__c,Invoicing_Comments__c,Tonnage_Quantity__c 
                from Dumpsters__c where Pdf_Parser_Delivery_Address__c=:DeliveryAddress and Dumpster_Size__c=:DumpsterSize and (Status__c='Request for Pick-Up' or Status__c='Drop Off Complete') ]))
                {   
                    CheckRecord = true;
                    dumplist.add(dump);
                }   
                    system.debug('Dumplist >>'+Dumplist);
 transition__c transition = new transition__c();
              transition.Html_body__c =strResponse;
              transition.Account__c= 'Bargain dumpster-swap';
            transition.Email_subject__c = email.subject;
              insert transition;
              
  
     
                        log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=PoNumber.replace('<br>','');
               log.po_date__c=string.valueOf(DumpsterDate);
                             

                log.phone_number__c=PhoneNumber;
                log.Delivery_adddtess__c =DeliveryAddress;
                log.Dumpster_size__c=DumpsterSize ;  
                log.Comments__c=Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','')+'\n\n'+PhoneNumber.replace('<br>','')+'\n\n'+placementins.replace('<br>',''); 
    log.Account__c='Bargain dumpster';
   
    log.Final_pickup_date__c='null';
    
    log.Placement_instruction__c=placementins;
    log.Type__c='Swap -Bargain';
                insert log;
            if(Dumplist.size()<2 && Dumplist.size()>0)
            {
               system.debug('1212121212>.>>>');
               Dumpsters__c dumpster = new Dumpsters__c();

                        for(Dumpsters__c dump : dumplist)
                        {
                             system.debug('dumpster value is'+dump);
                            
                            dump.Driver__c = dump.Pick_Up_Driver__c; 
                            dump.Status__c = 'Request for Pick-Up';
                            dump.Email_Success_helper__c = 'Request for Pick-Up';
                            dump.Confirmed_Pick_Up_Date__c      = Date.valueOf(DumpsterDate[2]+'-'+DumpsterDate[0]+'-'+DumpsterDate[1]);
                            
                        }
                        if(Dumplist.size() > 0)
                        {
                            update dumplist;
                            
                        }
            
                dumpster.AAccountccount__c              = AccountIdval;
                dumpster.Status__c                      = 'Unscheduled';
                dumpster.DifferentDriverSameAddress__c  = TRUE;
                dumpster.Purchase_Order__c              = PoNumber;
                dumpster.Drop_Off_Visit_Date__c         = Date.valueOf(DumpsterDate[2]+'-'+DumpsterDate[0]+'-'+DumpsterDate[1]);
                dumpster.Dumpster_Size__c               = DumpsterSize;
                dumpster.Pdf_Parser_Delivery_Address__c = DeliveryAddress ;
                dumpster.Phone_Number_2__c              = PhoneNumber.replace('<br>','');
                dumpster.Email_Success_helper__c        = AccountIdval;
                dumpster.Rental__c                      = 'Dumpster Rental';
                dumpster.Comments__c                    = Label.Update_Comments_Field +'\n\n' +Comments.replace('<br>','')+'\n\n'+PhoneNumber.replace('<br>','')+'\n\n'+placementins.replace('<br>','');

               
                if(dumpster.Dumpster_Size__c == '40yd'){
                dumpster.Driver__c = Label.X40ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X40ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '30yd'){
                dumpster.Driver__c = Label.X30ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X30ydDriver;
                }
                else if(dumpster.Dumpster_Size__c == '20yd'){
                dumpster.Driver__c = Label.X20ydDriver;
                dumpster.Pick_Up_Driver__c = Label.X20ydDriver;
                }    
                
                Set<String> HoustonZipcodes = new Set<String>();
                integer Count; String trimmedZip ;
                String[] Zipcode1 = System.Label.Houston_Zip_Code_1.split(',');
                String[] Zipcode2 = System.Label.Houston_Zip_Code_2.split(',');
                HoustonZipcodes.addall(Zipcode1);
                HoustonZipcodes.addall(Zipcode2);
                for(String zip : HoustonZipcodes){
                trimmedZip = zip.trim();
                if(DeliveryAddress.containsIgnoreCase(trimmedZip))
                    Count= 1;
                }
                if(Count==1)
                {
                    Dumpster.Houston_Helper__c = True; 
                    Dumpster.Haulbrooke_Regional_Base__c = 'Houston';
                    dumpster.Driver__c = label.HoustonDriver;
                    dumpster.Pick_Up_Driver__c = Label.HoustonDriver;
                }
                
                
                insert dumpster;
                 System.debug('<<<dumpster>>>'+dumpster);
                system.debug('>>>email.PlainTextBody<<<'+email.PlainTextBody);
                
                Attachment EmlAttachment   = new Attachment();                          
                EmlAttachment.Name         = email.Subject + '.eml';
                if(email.htmlBody != null)
                {
                EmlAttachment.Body         = Blob.valueOf(email.htmlBody.stripHtmlTags());
                }
                else
                {
                EmlAttachment.Body         = Blob.valueOf(email.PlainTextBody);
                }
                EmlAttachment.ContentType  = 'application/vnd.ms-outlook';
                EmlAttachment.ParentId     = dumpster.Id;
                EmlAttachment.IsPrivate    = false;
                AttachmentList.add(EmlAttachment);
                
                
                //Process of Attachment creations
                if(AttachmentList.size()>0){
                system.debug('attachment list size '+attachmentlist.size());
                insert AttachmentList;
                }
                
                List<Id> DumpstersId = new List<Id>();
                for(Dumpsters__c DumpstersFor : dumplist)
                {
                    DumpstersId.add(DumpstersFor.Id);
                }
                if(dumpster.Id != null)
                    DumpstersId.add(dumpster.Id);
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email); 
                }
                
         } 
         else
         {
             system.debug('<<SendingEmailMultipleDumpsterFound >> ');
             SendingEmailMultipleDumpsterFound(Dumplist);
         }    
         if(!CheckRecord)
         {
             system.debug('<<SendingEmailMultipleDumpsterFound >> ');
             SendingMailNoRecord(DumpsterSize+'yd',DeliveryAddress,PoNumber);
         }     
                 
        }
        catch(DMLException e)
        { 
                system.debug('Exception raised due to 111111---->'+e);
                SendingErrormail(e.getDmlMessage(0),null,null);                 
        }
        catch(exception e)
        {
            system.debug('Exception raised due to 22222222---->'+e+String.valueOf(e.getStackTraceString().split('\n')));
            SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);
        }
        
    }
    
    /*==================================Ticket No: 65943=======================================================
*Method Name     : public static void Update_FinalPickup_Bargain_Dumpster(String BodyContValue)
*Description     : Parsing PDF and update the Dumpster Record;
*Arguments       : Uploading the pdf file and parsing the details for DumpsterRecord Creation or updation
===========================================================================================================*/
      public static void Update_FinalPickup_Bargain_Dumpster(String BodyContvalue,Messaging.InboundEmail email){
      
      // if((email.plainTextBody.containsIgnoreCase('Bargain Dumpster')||email.htmlbody.containsIgnoreCase('Bargain Dumpster')) && ((email.subject.containsIgnoreCase('PO#') && (email.subject.containsIgnoreCase('FINAL PICK UP'))) ||email.subject.containsIgnoreCase('FINAL PICK UP')||email.subject.containsIgnoreCase('FINAL PICKUP')))
      
        try{
       
       
             system.debug('BArgain Finalpickup>>');
        
          List<dumpsters__c> dumplist = new List<dumpsters__c>();
            
          system.debug('BodyContvalue >>> '+BodyContvalue);
                  
          bodyContvalue = bodyContvalue.replace('\n','');
          system.debug('body is-----------------> '+BodyContvalue);
         
          string subject = email.subject;
          system.debug('Subject>>> '+subject); 
         
          String lowerContValue = BodyContvalue.toLowerCase();
          system.debug('lowerContValue is'+lowerContValue);
          
          String Dates;
          String[] Pickupdate;
          String specialrequestcomments;
          Date finaldate;
          
         
          Dates = subject.substringAfter('FINAL PICK UP').substringBefore('PO#').substringBefore('-').trim();
          Dates = Dates.right(5);
          system.debug('result is'+Dates);
          
          if(String.isEmpty(Dates)) //70453
          {
              Dates = subject.substringAfter('FINAL PICKUP').substringBefore('PO#').trim();
              Dates = Dates.right(5);
              system.debug('result is >>>> '+Dates);
          }
         
          Pickupdate= Dates.split('/');
          Pickupdate.add('2021');
          system.debug('Pickupdate is >>'+Pickupdate); 
          
         
          Integer yearno = Integer.valueof(Pickupdate[2]);
          Integer monthno = Integer.valueof(Pickupdate[0]);
          Integer dateno = Integer.valueof(Pickupdate[1]);
          finaldate = Date.newInstance(yearno,monthno,dateno);
          system.debug('value is======>>'+finaldate);
          
         
          String Pno;
          
          string  checkPno = subject.substringAfter('PO#').substringBefore('@').trim();
          Pno = checkPno.left(5);
          system.debug('po nukmber is >>>'+Pno); 
          
          system.debug('Po <> number '+Pno);
          
          
             if(Pno !='' && Pno !=' ' && Pno !=null){       
          for(Dumpsters__c dump : ([Select id, Confirmed_Pick_Up_Date__c, Comments__c, Trip_Order__c, Status__c, Purchase_Order__c from Dumpsters__c where Purchase_Order__c =: Pno and Status__c='Drop Off Complete'])){        //Ticket 
              system.debug('dumpster value is'+dump);
              dump.Status__c = 'Request for Pick-Up';
              dump.Email_Success_helper__c = 'Request for Pick-Up';
              if(Label.PDF_Parser_Trip_Order != null && Label.PDF_Parser_Trip_Order != 'null')
              {
                  dump.Trip_Order__c                  = Label.PDF_Parser_Trip_Order;
              }
              dump.Confirmed_Pick_Up_Date__c = Date.valueof(finaldate);
              if(specialrequestcomments != null && specialrequestcomments != '')
                  dump.Comments__c = dump.Comments__c.replace('Pick Up Instructions:', 'Pick Up Instructions:'+specialrequestcomments);
              dumplist.add(dump);           
          }
          }
          transition__c transition = new transition__c();
              transition.Html_body__c =bodyContvalue;
              transition.Account__c= 'Bargain dumpster-final pickup';
            transition.Email_subject__c = email.subject;
              insert transition;
              
                log__c log= new log__c();
                log.Transition__c  = transition.id;
                log.Po_number__c=Dates + '-'+Pno +'-'+ finaldate;
               
              log.Account__c='Bargain dumpster';
    log.Type__c='finalpickup -Bargain';
                insert log;
  
     
          if(Dumplist.size() > 0){
              
                  update dumplist;
                  List<Id> DumpstersId = new List<Id>();
                for(Dumpsters__c DumpstersFor : dumplist)
                {
                    DumpstersId.add(DumpstersFor.Id);
                }
                if(DumpstersId.size() > 0)
                {
                    send_Reply(DumpstersId, email);
                }
                }
                else
                {
                    SendingMailNoRecordForUpdate(Pno);       
                }  
              
            }
               catch(DMLException e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(e.getDmlMessage(0),'null',null); 
               
            }
            catch(Exception e){ //Handling exception here
                system.debug('Exception raised due to ---->'+e);
                SendingErrormail(String.valueOf(e)+' '+String.valueOf(e.getStackTraceString().split('\n')),null,null);  
            }   
          
      }
    
    
}